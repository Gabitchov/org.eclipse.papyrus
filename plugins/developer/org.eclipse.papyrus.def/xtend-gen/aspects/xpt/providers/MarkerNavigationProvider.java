/**
 * Copyright (c) 2007, 2009, 2013 Borland Software Corporation and others
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 * 	  Michael Golubev (Montages) - #386838 - migrate to Xtend2
 */
package aspects.xpt.providers;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import org.eclipse.gmf.codegen.gmfgen.GenDiagram;
import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;
import org.eclipse.gmf.codegen.gmfgen.GenPlugin;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Extension;
import xpt.Common;

@Singleton
@SuppressWarnings("all")
public class MarkerNavigationProvider extends xpt.providers.MarkerNavigationProvider {
  @Inject
  @Extension
  private Common _common;
  
  public CharSequence MarkerNavigationProvider(final GenDiagram it) {
    StringConcatenation _builder = new StringConcatenation();
    GenEditorGenerator _editorGen = it.getEditorGen();
    CharSequence _copyright = this._common.copyright(_editorGen);
    _builder.append(_copyright, "");
    _builder.newLineIfNotEmpty();
    _builder.append("package ");
    CharSequence _packageName = this.packageName(it);
    _builder.append(_packageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _generatedClassComment = this._common.generatedClassComment();
    _builder.append(_generatedClassComment, "");
    _builder.newLineIfNotEmpty();
    _builder.append("public class ");
    CharSequence _className = this.className(it);
    _builder.append(_className, "");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("extends org.eclipse.gmf.runtime.emf.ui.providers.marker.AbstractModelMarkerNavigationProvider {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    CharSequence _generatedMemberComment = this._common.generatedMemberComment();
    _builder.append(_generatedMemberComment, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public static final String MARKER_TYPE =");
    _builder.newLine();
    _builder.append("\t\t");
    GenEditorGenerator _editorGen_1 = it.getEditorGen();
    GenPlugin _plugin = _editorGen_1.getPlugin();
    String _activatorQualifiedClassName = _plugin.getActivatorQualifiedClassName();
    _builder.append(_activatorQualifiedClassName, "\t\t");
    _builder.append(".ID + \".");
    String _validationDiagnosticMarkerType = it.getValidationDiagnosticMarkerType();
    _builder.append(_validationDiagnosticMarkerType, "\t\t");
    _builder.append("\"; ");
    CharSequence _nonNLS = this._common.nonNLS(1);
    _builder.append(_nonNLS, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    CharSequence _generatedMemberComment_1 = this._common.generatedMemberComment();
    _builder.append(_generatedMemberComment_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("protected void doGotoMarker(org.eclipse.core.resources.IMarker marker) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String elementId = marker.getAttribute(org.eclipse.gmf.runtime.common.core.resources.IMarker.ELEMENT_ID, null);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (elementId == null || !(getEditor() instanceof org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor editor =");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor) getEditor();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("java.util.Map<?, ?> editPartRegistry = editor.getDiagramGraphicalViewer().getEditPartRegistry();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("org.eclipse.emf.ecore.EObject targetView = editor.getDiagram().eResource().getEObject(elementId);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (targetView == null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("org.eclipse.gef.EditPart targetEditPart = (org.eclipse.gef.EditPart) editPartRegistry.get(targetView);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (targetEditPart != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    String _diagramEditorUtilQualifiedClassName = it.getDiagramEditorUtilQualifiedClassName();
    _builder.append(_diagramEditorUtilQualifiedClassName, "\t\t\t");
    _builder.append(".selectElementsInDiagram(");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("editor, java.util.Arrays.asList(new org.eclipse.gef.EditPart[] { targetEditPart }));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    CharSequence _generatedMemberComment_2 = this._common.generatedMemberComment();
    _builder.append(_generatedMemberComment_2, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public static void deleteMarkers(org.eclipse.core.resources.IResource resource) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("resource.deleteMarkers(MARKER_TYPE, true, org.eclipse.core.resources.IResource.DEPTH_ZERO);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (org.eclipse.core.runtime.CoreException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    GenEditorGenerator _editorGen_2 = it.getEditorGen();
    GenPlugin _plugin_1 = _editorGen_2.getPlugin();
    String _activatorQualifiedClassName_1 = _plugin_1.getActivatorQualifiedClassName();
    _builder.append(_activatorQualifiedClassName_1, "\t\t\t");
    _builder.append(".getInstance().logError(");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("\"Failed to delete validation markers\", e); ");
    CharSequence _nonNLS_1 = this._common.nonNLS(1);
    _builder.append(_nonNLS_1, "\t\t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    CharSequence _generatedMemberComment_3 = this._common.generatedMemberComment();
    _builder.append(_generatedMemberComment_3, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public static org.eclipse.core.resources.IMarker addMarker(org.eclipse.core.resources.IFile file,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String elementId, String location, String message, int statusSeverity) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("org.eclipse.core.resources.IMarker marker = null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("marker = file.createMarker(MARKER_TYPE);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("marker.setAttribute(org.eclipse.core.resources.IMarker.MESSAGE, message);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("marker.setAttribute(org.eclipse.core.resources.IMarker.LOCATION, location);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("marker.setAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, elementId);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int markerSeverity = org.eclipse.core.resources.IMarker.SEVERITY_INFO;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (statusSeverity == org.eclipse.core.runtime.IStatus.WARNING) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("markerSeverity = org.eclipse.core.resources.IMarker.SEVERITY_WARNING;    \t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if (statusSeverity == org.eclipse.core.runtime.IStatus.ERROR ||");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("statusSeverity == org.eclipse.core.runtime.IStatus.CANCEL) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("markerSeverity = org.eclipse.core.resources.IMarker.SEVERITY_ERROR;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("marker.setAttribute(org.eclipse.core.resources.IMarker.SEVERITY, markerSeverity);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} catch (org.eclipse.core.runtime.CoreException e) {");
    _builder.newLine();
    _builder.append("\t\t");
    GenEditorGenerator _editorGen_3 = it.getEditorGen();
    GenPlugin _plugin_2 = _editorGen_3.getPlugin();
    String _activatorQualifiedClassName_2 = _plugin_2.getActivatorQualifiedClassName();
    _builder.append(_activatorQualifiedClassName_2, "\t\t");
    _builder.append(".getInstance().logError(");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("\"Failed to create validation marker\", e); ");
    CharSequence _nonNLS_2 = this._common.nonNLS(1);
    _builder.append(_nonNLS_2, "\t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return marker;\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _additions = this.additions(it);
    _builder.append(_additions, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
