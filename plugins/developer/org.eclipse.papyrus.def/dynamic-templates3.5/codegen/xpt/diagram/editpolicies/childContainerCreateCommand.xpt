/*
 * Copyright (c) 2007, 2009 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */
 
«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«IMPORT 'http://www.eclipse.org/papyrus/2009/papyrusgmfgenextension'»

«EXTENSION xpt::diagram::updater::Utils»

«DEFINE childContainerCreateCommand FOR Sequence(gmfgen::GenNode)-»
«IF not self->isEmpty()-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest req) {
		org.eclipse.gmf.runtime.emf.type.core.IElementType requestElementType = req.getElementType();
		if(requestElementType == null) {
			return super.getCreateCommand(req);
		}
		org.eclipse.gmf.runtime.emf.type.core.IElementType baseElementType = requestElementType;
		boolean isExtendedType = false;
		if(requestElementType instanceof org.eclipse.papyrus.infra.extendedtypes.types.IExtendedHintedElementType) {
			baseElementType = org.eclipse.papyrus.infra.extendedtypes.util.ElementTypeUtils.getClosestDiagramType(requestElementType);
			if(baseElementType != null) {
				isExtendedType = true;
			} else {
				// no reference element type ID. using the closest super element type to give more opportunities, but can lead to bugs.
				baseElementType = org.eclipse.papyrus.infra.extendedtypes.util.ElementTypeUtils.findClosestNonExtendedElementType((org.eclipse.papyrus.infra.extendedtypes.types.IExtendedHintedElementType)requestElementType);
				isExtendedType = true;
			}
		}
	«FOREACH self AS n-»
			«EXPAND childNodeCreateCommand(n) FOR n.modelFacet-»
	«ENDFOREACH-»
		return super.getCreateCommand(req);
	}
«ENDIF-»
«ENDDEFINE»

«DEFINE childNodeCreateCommand(node : gmfgen::GenNode) FOR gmfgen::TypeModelFacet-»
if («EXPAND xpt::providers::ElementTypes::accessElementType FOR node» == baseElementType) {
	«IF papyrusgmfgenextension::GenerateUsingElementTypeCreationCommand.allInstances()->size()>0-»
	// adjust the containment feature
	org.eclipse.emf.ecore.EReference containmentFeature = «EXPAND MetaModel::MetaFeature FOR self.childMetaFeature»;
	req.setContainmentFeature(containmentFeature);
	«ENDIF»
	if(isExtendedType) {
		return getExtendedTypeCreationCommand(req, (org.eclipse.papyrus.infra.extendedtypes.types.IExtendedHintedElementType)requestElementType);
	}
	«IF papyrusgmfgenextension::GenerateUsingElementTypeCreationCommand.allInstances()->size()>0»
	return getGEFWrapper(getSemanticCreationCommand(req));
	«ELSE-»
	return getGEFWrapper(new «node.getCreateCommandQualifiedClassName()»(req, org.eclipse.papyrus.infra.gmfdiag.common.utils.DiagramUtils.getDiagramFrom(getHost())));
	«ENDIF»
	
}
«ENDDEFINE»