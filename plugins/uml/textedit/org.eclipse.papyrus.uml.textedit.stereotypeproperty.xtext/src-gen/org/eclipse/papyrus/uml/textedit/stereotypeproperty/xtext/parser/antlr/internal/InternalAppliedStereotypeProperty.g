/*
* generated by Xtext
*/
grammar InternalAppliedStereotypeProperty;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.papyrus.uml.textedit.stereotypeproperty.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.papyrus.uml.textedit.stereotypeproperty.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.papyrus.uml.textedit.stereotypeproperty.xtext.services.AppliedStereotypePropertyGrammarAccess;

}

@parser::members {

 	private AppliedStereotypePropertyGrammarAccess grammarAccess;
 	
    public InternalAppliedStereotypePropertyParser(TokenStream input, AppliedStereotypePropertyGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "AppliedStereotypePropertyRule";	
   	}
   	
   	@Override
   	protected AppliedStereotypePropertyGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAppliedStereotypePropertyRule
entryRuleAppliedStereotypePropertyRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAppliedStereotypePropertyRuleRule()); }
	 iv_ruleAppliedStereotypePropertyRule=ruleAppliedStereotypePropertyRule 
	 { $current=$iv_ruleAppliedStereotypePropertyRule.current; } 
	 EOF 
;

// Rule AppliedStereotypePropertyRule
ruleAppliedStereotypePropertyRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getAppliedStereotypePropertyRuleAccess().getValueExpressionValueRuleParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleExpressionValueRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAppliedStereotypePropertyRuleRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"ExpressionValueRule");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleExpressionValueRule
entryRuleExpressionValueRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionValueRuleRule()); }
	 iv_ruleExpressionValueRule=ruleExpressionValueRule 
	 { $current=$iv_ruleExpressionValueRule.current; } 
	 EOF 
;

// Rule ExpressionValueRule
ruleExpressionValueRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='=' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpressionValueRuleAccess().getEqualsSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionValueRuleAccess().getExpressionSequenceElementParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleSequenceElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionValueRuleRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"SequenceElement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleLITERAL
entryRuleLITERAL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLITERALRule()); }
	 iv_ruleLITERAL=ruleLITERAL 
	 { $current=$iv_ruleLITERAL.current; } 
	 EOF 
;

// Rule LITERAL
ruleLITERAL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLITERALAccess().getBOOLEAN_LITERALParserRuleCall_0()); 
    }
    this_BOOLEAN_LITERAL_0=ruleBOOLEAN_LITERAL
    { 
        $current = $this_BOOLEAN_LITERAL_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLITERALAccess().getNUMBER_LITERALParserRuleCall_1()); 
    }
    this_NUMBER_LITERAL_1=ruleNUMBER_LITERAL
    { 
        $current = $this_NUMBER_LITERAL_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLITERALAccess().getSTRING_LITERALParserRuleCall_2()); 
    }
    this_STRING_LITERAL_2=ruleSTRING_LITERAL
    { 
        $current = $this_STRING_LITERAL_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBOOLEAN_LITERAL
entryRuleBOOLEAN_LITERAL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBOOLEAN_LITERALRule()); }
	 iv_ruleBOOLEAN_LITERAL=ruleBOOLEAN_LITERAL 
	 { $current=$iv_ruleBOOLEAN_LITERAL.current; } 
	 EOF 
;

// Rule BOOLEAN_LITERAL
ruleBOOLEAN_LITERAL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBOOLEAN_LITERALAccess().getValueBooleanValueEnumRuleCall_0()); 
	    }
		lv_value_0_0=ruleBooleanValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBOOLEAN_LITERALRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"BooleanValue");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleNUMBER_LITERAL
entryRuleNUMBER_LITERAL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNUMBER_LITERALRule()); }
	 iv_ruleNUMBER_LITERAL=ruleNUMBER_LITERAL 
	 { $current=$iv_ruleNUMBER_LITERAL.current; } 
	 EOF 
;

// Rule NUMBER_LITERAL
ruleNUMBER_LITERAL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNUMBER_LITERALAccess().getINTEGER_LITERALParserRuleCall_0()); 
    }
    this_INTEGER_LITERAL_0=ruleINTEGER_LITERAL
    { 
        $current = $this_INTEGER_LITERAL_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNUMBER_LITERALAccess().getUNLIMITED_LITERALParserRuleCall_1()); 
    }
    this_UNLIMITED_LITERAL_1=ruleUNLIMITED_LITERAL
    { 
        $current = $this_UNLIMITED_LITERAL_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleINTEGER_LITERAL
entryRuleINTEGER_LITERAL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getINTEGER_LITERALRule()); }
	 iv_ruleINTEGER_LITERAL=ruleINTEGER_LITERAL 
	 { $current=$iv_ruleINTEGER_LITERAL.current; } 
	 EOF 
;

// Rule INTEGER_LITERAL
ruleINTEGER_LITERAL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INTEGER_VALUE
		{
			newLeafNode(lv_value_0_0, grammarAccess.getINTEGER_LITERALAccess().getValueINTEGER_VALUETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getINTEGER_LITERALRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INTEGER_VALUE");
	    }

)
)
;





// Entry rule entryRuleUNLIMITED_LITERAL
entryRuleUNLIMITED_LITERAL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUNLIMITED_LITERALRule()); }
	 iv_ruleUNLIMITED_LITERAL=ruleUNLIMITED_LITERAL 
	 { $current=$iv_ruleUNLIMITED_LITERAL.current; } 
	 EOF 
;

// Rule UNLIMITED_LITERAL
ruleUNLIMITED_LITERAL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=	'*' 
    {
        newLeafNode(lv_value_0_0, grammarAccess.getUNLIMITED_LITERALAccess().getValueAsteriskKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUNLIMITED_LITERALRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_0, "*");
	    }

)
)
;





// Entry rule entryRuleSTRING_LITERAL
entryRuleSTRING_LITERAL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSTRING_LITERALRule()); }
	 iv_ruleSTRING_LITERAL=ruleSTRING_LITERAL 
	 { $current=$iv_ruleSTRING_LITERAL.current; } 
	 EOF 
;

// Rule STRING_LITERAL
ruleSTRING_LITERAL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getSTRING_LITERALAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSTRING_LITERALRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleNameExpression
entryRuleNameExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameExpressionRule()); }
	 iv_ruleNameExpression=ruleNameExpression 
	 { $current=$iv_ruleNameExpression.current; } 
	 EOF 
;

// Rule NameExpression
ruleNameExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
(
		lv_prefixOp_0_1=	'++' 
    {
        newLeafNode(lv_prefixOp_0_1, grammarAccess.getNameExpressionAccess().getPrefixOpPlusSignPlusSignKeyword_0_0_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameExpressionRule());
	        }
       		setWithLastConsumed($current, "prefixOp", lv_prefixOp_0_1, null);
	    }

    |		lv_prefixOp_0_2=	'--' 
    {
        newLeafNode(lv_prefixOp_0_2, grammarAccess.getNameExpressionAccess().getPrefixOpHyphenMinusHyphenMinusKeyword_0_0_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameExpressionRule());
	        }
       		setWithLastConsumed($current, "prefixOp", lv_prefixOp_0_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNameExpressionAccess().getPathQualifiedNamePathParserRuleCall_0_0_1_0()); 
	    }
		lv_path_1_0=ruleQualifiedNamePath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameExpressionRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_1_0, 
        		"QualifiedNamePath");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_id_2_0=RULE_ID
		{
			newLeafNode(lv_id_2_0, grammarAccess.getNameExpressionAccess().getIdIDTerminalRuleCall_0_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"ID");
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getNameExpressionAccess().getPathQualifiedNamePathParserRuleCall_0_1_0_0()); 
	    }
		lv_path_3_0=ruleQualifiedNamePath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameExpressionRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_3_0, 
        		"QualifiedNamePath");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_id_4_0=RULE_ID
		{
			newLeafNode(lv_id_4_0, grammarAccess.getNameExpressionAccess().getIdIDTerminalRuleCall_0_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_4_0, 
        		"ID");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getNameExpressionAccess().getInvocationCompletionTupleParserRuleCall_0_1_2_0_0()); 
	    }
		lv_invocationCompletion_5_0=ruleTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameExpressionRule());
	        }
       		set(
       			$current, 
       			"invocationCompletion",
        		lv_invocationCompletion_5_0, 
        		"Tuple");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getNameExpressionAccess().getSequenceConstructionCompletionSequenceConstructionOrAccessCompletionParserRuleCall_0_1_2_1_0()); 
	    }
		lv_sequenceConstructionCompletion_6_0=ruleSequenceConstructionOrAccessCompletion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameExpressionRule());
	        }
       		set(
       			$current, 
       			"sequenceConstructionCompletion",
        		lv_sequenceConstructionCompletion_6_0, 
        		"SequenceConstructionOrAccessCompletion");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
(
		lv_postfixOp_7_1=	'++' 
    {
        newLeafNode(lv_postfixOp_7_1, grammarAccess.getNameExpressionAccess().getPostfixOpPlusSignPlusSignKeyword_0_1_2_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameExpressionRule());
	        }
       		setWithLastConsumed($current, "postfixOp", lv_postfixOp_7_1, null);
	    }

    |		lv_postfixOp_7_2=	'--' 
    {
        newLeafNode(lv_postfixOp_7_2, grammarAccess.getNameExpressionAccess().getPostfixOpHyphenMinusHyphenMinusKeyword_0_1_2_2_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameExpressionRule());
	        }
       		setWithLastConsumed($current, "postfixOp", lv_postfixOp_7_2, null);
	    }

)

)
))?))(
(
		{ 
	        newCompositeNode(grammarAccess.getNameExpressionAccess().getSuffixSuffixExpressionParserRuleCall_1_0()); 
	    }
		lv_suffix_8_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameExpressionRule());
	        }
       		set(
       			$current, 
       			"suffix",
        		lv_suffix_8_0, 
        		"SuffixExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleQualifiedNamePath
entryRuleQualifiedNamePath returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNamePathRule()); }
	 iv_ruleQualifiedNamePath=ruleQualifiedNamePath 
	 { $current=$iv_ruleQualifiedNamePath.current; } 
	 EOF 
;

// Rule QualifiedNamePath
ruleQualifiedNamePath returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedNamePathAccess().getNamespaceUnqualifiedNameParserRuleCall_0_0()); 
	    }
		lv_namespace_0_0=ruleUnqualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedNamePathRule());
	        }
       		add(
       			$current, 
       			"namespace",
        		lv_namespace_0_0, 
        		"UnqualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='::' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQualifiedNamePathAccess().getColonColonKeyword_1());
    }
)+
;





// Entry rule entryRuleUnqualifiedName
entryRuleUnqualifiedName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnqualifiedNameRule()); }
	 iv_ruleUnqualifiedName=ruleUnqualifiedName 
	 { $current=$iv_ruleUnqualifiedName.current; } 
	 EOF 
;

// Rule UnqualifiedName
ruleUnqualifiedName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getUnqualifiedNameAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnqualifiedNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnqualifiedNameAccess().getTemplateBindingTemplateBindingParserRuleCall_1_0()); 
	    }
		lv_templateBinding_1_0=ruleTemplateBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnqualifiedNameRule());
	        }
       		set(
       			$current, 
       			"templateBinding",
        		lv_templateBinding_1_0, 
        		"TemplateBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleTemplateBinding
entryRuleTemplateBinding returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplateBindingRule()); }
	 iv_ruleTemplateBinding=ruleTemplateBinding 
	 { $current=$iv_ruleTemplateBinding.current; } 
	 EOF 
;

// Rule TemplateBinding
ruleTemplateBinding returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTemplateBindingAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateBindingAccess().getBindingsNamedTemplateBindingParserRuleCall_1_0()); 
	    }
		lv_bindings_1_0=ruleNamedTemplateBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateBindingRule());
	        }
       		add(
       			$current, 
       			"bindings",
        		lv_bindings_1_0, 
        		"NamedTemplateBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTemplateBindingAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateBindingAccess().getBindingsNamedTemplateBindingParserRuleCall_2_1_0()); 
	    }
		lv_bindings_3_0=ruleNamedTemplateBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateBindingRule());
	        }
       		add(
       			$current, 
       			"bindings",
        		lv_bindings_3_0, 
        		"NamedTemplateBinding");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTemplateBindingAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleNamedTemplateBinding
entryRuleNamedTemplateBinding returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedTemplateBindingRule()); }
	 iv_ruleNamedTemplateBinding=ruleNamedTemplateBinding 
	 { $current=$iv_ruleNamedTemplateBinding.current; } 
	 EOF 
;

// Rule NamedTemplateBinding
ruleNamedTemplateBinding returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_formal_0_0=RULE_ID
		{
			newLeafNode(lv_formal_0_0, grammarAccess.getNamedTemplateBindingAccess().getFormalIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamedTemplateBindingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"formal",
        		lv_formal_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNamedTemplateBindingAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedTemplateBindingAccess().getActualQualifiedNameWithBindingParserRuleCall_2_0()); 
	    }
		lv_actual_2_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedTemplateBindingRule());
	        }
       		set(
       			$current, 
       			"actual",
        		lv_actual_2_0, 
        		"QualifiedNameWithBinding");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedNameWithBinding
entryRuleQualifiedNameWithBinding returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithBindingRule()); }
	 iv_ruleQualifiedNameWithBinding=ruleQualifiedNameWithBinding 
	 { $current=$iv_ruleQualifiedNameWithBinding.current; } 
	 EOF 
;

// Rule QualifiedNameWithBinding
ruleQualifiedNameWithBinding returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getQualifiedNameWithBindingAccess().getIdIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifiedNameWithBindingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedNameWithBindingAccess().getBindingTemplateBindingParserRuleCall_1_0()); 
	    }
		lv_binding_1_0=ruleTemplateBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedNameWithBindingRule());
	        }
       		set(
       			$current, 
       			"binding",
        		lv_binding_1_0, 
        		"TemplateBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_2='::' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQualifiedNameWithBindingAccess().getColonColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedNameWithBindingAccess().getRemainingQualifiedNameWithBindingParserRuleCall_2_1_0()); 
	    }
		lv_remaining_3_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedNameWithBindingRule());
	        }
       		set(
       			$current, 
       			"remaining",
        		lv_remaining_3_0, 
        		"QualifiedNameWithBinding");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTuple
entryRuleTuple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTupleRule()); }
	 iv_ruleTuple=ruleTuple 
	 { $current=$iv_ruleTuple.current; } 
	 EOF 
;

// Rule Tuple
ruleTuple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTupleAccess().getTupleAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTupleAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTupleAccess().getTupleElementsTupleElementParserRuleCall_2_0_0()); 
	    }
		lv_tupleElements_2_0=ruleTupleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleRule());
	        }
       		add(
       			$current, 
       			"tupleElements",
        		lv_tupleElements_2_0, 
        		"TupleElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTupleAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleAccess().getTupleElementsTupleElementParserRuleCall_2_1_1_0()); 
	    }
		lv_tupleElements_4_0=ruleTupleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleRule());
	        }
       		add(
       			$current, 
       			"tupleElements",
        		lv_tupleElements_4_0, 
        		"TupleElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTupleAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleTupleElement
entryRuleTupleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTupleElementRule()); }
	 iv_ruleTupleElement=ruleTupleElement 
	 { $current=$iv_ruleTupleElement.current; } 
	 EOF 
;

// Rule TupleElement
ruleTupleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleElementAccess().getArgumentExpressionParserRuleCall_0()); 
	    }
		lv_argument_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleElementRule());
	        }
       		set(
       			$current, 
       			"argument",
        		lv_argument_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getConditionalTestExpressionParserRuleCall()); 
    }
    this_ConditionalTestExpression_0=ruleConditionalTestExpression
    { 
        $current = $this_ConditionalTestExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleConditionalTestExpression
entryRuleConditionalTestExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalTestExpressionRule()); }
	 iv_ruleConditionalTestExpression=ruleConditionalTestExpression 
	 { $current=$iv_ruleConditionalTestExpression.current; } 
	 EOF 
;

// Rule ConditionalTestExpression
ruleConditionalTestExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalTestExpressionAccess().getExpConditionalOrExpressionParserRuleCall_0_0()); 
	    }
		lv_exp_0_0=ruleConditionalOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalTestExpressionRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_0_0, 
        		"ConditionalOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='?' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalTestExpressionAccess().getQuestionMarkKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalTestExpressionAccess().getWhenTrueConditionalTestExpressionParserRuleCall_1_1_0()); 
	    }
		lv_whenTrue_2_0=ruleConditionalTestExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalTestExpressionRule());
	        }
       		set(
       			$current, 
       			"whenTrue",
        		lv_whenTrue_2_0, 
        		"ConditionalTestExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConditionalTestExpressionAccess().getColonKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalTestExpressionAccess().getWhenFalseConditionalTestExpressionParserRuleCall_1_3_0()); 
	    }
		lv_whenFalse_4_0=ruleConditionalTestExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalTestExpressionRule());
	        }
       		set(
       			$current, 
       			"whenFalse",
        		lv_whenFalse_4_0, 
        		"ConditionalTestExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConditionalOrExpression
entryRuleConditionalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalOrExpressionRule()); }
	 iv_ruleConditionalOrExpression=ruleConditionalOrExpression 
	 { $current=$iv_ruleConditionalOrExpression.current; } 
	 EOF 
;

// Rule ConditionalOrExpression
ruleConditionalOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getExpConditionalAndExpressionParserRuleCall_0_0()); 
	    }
		lv_exp_0_0=ruleConditionalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalOrExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_0_0, 
        		"ConditionalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='||' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getExpConditionalAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_exp_2_0=ruleConditionalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalOrExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_2_0, 
        		"ConditionalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConditionalAndExpression
entryRuleConditionalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalAndExpressionRule()); }
	 iv_ruleConditionalAndExpression=ruleConditionalAndExpression 
	 { $current=$iv_ruleConditionalAndExpression.current; } 
	 EOF 
;

// Rule ConditionalAndExpression
ruleConditionalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getExpInclusiveOrExpressionParserRuleCall_0_0()); 
	    }
		lv_exp_0_0=ruleInclusiveOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalAndExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_0_0, 
        		"InclusiveOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='&&' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalAndExpressionAccess().getAmpersandAmpersandKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getExpInclusiveOrExpressionParserRuleCall_1_1_0()); 
	    }
		lv_exp_2_0=ruleInclusiveOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalAndExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_2_0, 
        		"InclusiveOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleInclusiveOrExpression
entryRuleInclusiveOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInclusiveOrExpressionRule()); }
	 iv_ruleInclusiveOrExpression=ruleInclusiveOrExpression 
	 { $current=$iv_ruleInclusiveOrExpression.current; } 
	 EOF 
;

// Rule InclusiveOrExpression
ruleInclusiveOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInclusiveOrExpressionAccess().getExpExclusiveOrExpressionParserRuleCall_0_0()); 
	    }
		lv_exp_0_0=ruleExclusiveOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInclusiveOrExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_0_0, 
        		"ExclusiveOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='|' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInclusiveOrExpressionAccess().getVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInclusiveOrExpressionAccess().getExpExclusiveOrExpressionParserRuleCall_1_1_0()); 
	    }
		lv_exp_2_0=ruleExclusiveOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInclusiveOrExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_2_0, 
        		"ExclusiveOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExclusiveOrExpression
entryRuleExclusiveOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExclusiveOrExpressionRule()); }
	 iv_ruleExclusiveOrExpression=ruleExclusiveOrExpression 
	 { $current=$iv_ruleExclusiveOrExpression.current; } 
	 EOF 
;

// Rule ExclusiveOrExpression
ruleExclusiveOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExclusiveOrExpressionAccess().getExpAndExpressionParserRuleCall_0_0()); 
	    }
		lv_exp_0_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExclusiveOrExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_0_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='^' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExclusiveOrExpressionAccess().getCircumflexAccentKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExclusiveOrExpressionAccess().getExpAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_exp_2_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExclusiveOrExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_2_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getExpEqualityExpressionParserRuleCall_0_0()); 
	    }
		lv_exp_0_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_0_0, 
        		"EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='&' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAndExpressionAccess().getAmpersandKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getExpEqualityExpressionParserRuleCall_1_1_0()); 
	    }
		lv_exp_2_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_2_0, 
        		"EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getExpClassificationExpressionParserRuleCall_0_0()); 
	    }
		lv_exp_0_0=ruleClassificationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_0_0, 
        		"ClassificationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		lv_op_1_1=	'==' 
    {
        newLeafNode(lv_op_1_1, grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=	'!=' 
    {
        newLeafNode(lv_op_1_2, grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_1_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getExpClassificationExpressionParserRuleCall_1_1_0()); 
	    }
		lv_exp_2_0=ruleClassificationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_2_0, 
        		"ClassificationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleClassificationExpression
entryRuleClassificationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassificationExpressionRule()); }
	 iv_ruleClassificationExpression=ruleClassificationExpression 
	 { $current=$iv_ruleClassificationExpression.current; } 
	 EOF 
;

// Rule ClassificationExpression
ruleClassificationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getClassificationExpressionAccess().getExpRelationalExpressionParserRuleCall_0_0()); 
	    }
		lv_exp_0_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassificationExpressionRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_0_0, 
        		"RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		lv_op_1_1=	'instanceof' 
    {
        newLeafNode(lv_op_1_1, grammarAccess.getClassificationExpressionAccess().getOpInstanceofKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassificationExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=	'hastype' 
    {
        newLeafNode(lv_op_1_2, grammarAccess.getClassificationExpressionAccess().getOpHastypeKeyword_1_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassificationExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassificationExpressionAccess().getTypeNameNameExpressionParserRuleCall_1_1_0()); 
	    }
		lv_typeName_2_0=ruleNameExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassificationExpressionRule());
	        }
       		set(
       			$current, 
       			"typeName",
        		lv_typeName_2_0, 
        		"NameExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getLeftShiftExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleShiftExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"ShiftExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		lv_op_1_1=	'<' 
    {
        newLeafNode(lv_op_1_1, grammarAccess.getRelationalExpressionAccess().getOpLessThanSignKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=	'>' 
    {
        newLeafNode(lv_op_1_2, grammarAccess.getRelationalExpressionAccess().getOpGreaterThanSignKeyword_1_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

    |		lv_op_1_3=	'<=' 
    {
        newLeafNode(lv_op_1_3, grammarAccess.getRelationalExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_3, null);
	    }

    |		lv_op_1_4=	'>=' 
    {
        newLeafNode(lv_op_1_4, grammarAccess.getRelationalExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_4, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightShiftExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_2_0=ruleShiftExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"ShiftExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleShiftExpression
entryRuleShiftExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShiftExpressionRule()); }
	 iv_ruleShiftExpression=ruleShiftExpression 
	 { $current=$iv_ruleShiftExpression.current; } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExpressionAccess().getExpAdditiveExpressionParserRuleCall_0_0()); 
	    }
		lv_exp_0_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_0_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		lv_op_1_1=	'<<' 
    {
        newLeafNode(lv_op_1_1, grammarAccess.getShiftExpressionAccess().getOpLessThanSignLessThanSignKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getShiftExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=	'>>' 
    {
        newLeafNode(lv_op_1_2, grammarAccess.getShiftExpressionAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getShiftExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

    |		lv_op_1_3=	'>>>' 
    {
        newLeafNode(lv_op_1_3, grammarAccess.getShiftExpressionAccess().getOpGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getShiftExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_3, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExpressionAccess().getExpAdditiveExpressionParserRuleCall_1_1_0()); 
	    }
		lv_exp_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExpMultiplicativeExpressionParserRuleCall_0_0()); 
	    }
		lv_exp_0_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_0_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		lv_op_1_1=	'+' 
    {
        newLeafNode(lv_op_1_1, grammarAccess.getAdditiveExpressionAccess().getOpPlusSignKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=	'-' 
    {
        newLeafNode(lv_op_1_2, grammarAccess.getAdditiveExpressionAccess().getOpHyphenMinusKeyword_1_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExpMultiplicativeExpressionParserRuleCall_1_1_0()); 
	    }
		lv_exp_2_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_2_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExpUnaryExpressionParserRuleCall_0_0()); 
	    }
		lv_exp_0_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_0_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		lv_op_1_1=	'*' 
    {
        newLeafNode(lv_op_1_1, grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=	'/' 
    {
        newLeafNode(lv_op_1_2, grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

    |		lv_op_1_3=	'%' 
    {
        newLeafNode(lv_op_1_3, grammarAccess.getMultiplicativeExpressionAccess().getOpPercentSignKeyword_1_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_3, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExpUnaryExpressionParserRuleCall_1_1_0()); 
	    }
		lv_exp_2_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_2_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_op_0_1=	'!' 
    {
        newLeafNode(lv_op_0_1, grammarAccess.getUnaryExpressionAccess().getOpExclamationMarkKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_1, null);
	    }

    |		lv_op_0_2=	'-' 
    {
        newLeafNode(lv_op_0_2, grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_2, null);
	    }

    |		lv_op_0_3=	'+' 
    {
        newLeafNode(lv_op_0_3, grammarAccess.getUnaryExpressionAccess().getOpPlusSignKeyword_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_3, null);
	    }

    |		lv_op_0_4=	'$' 
    {
        newLeafNode(lv_op_0_4, grammarAccess.getUnaryExpressionAccess().getOpDollarSignKeyword_0_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_4, null);
	    }

    |		lv_op_0_5=	'~' 
    {
        newLeafNode(lv_op_0_5, grammarAccess.getUnaryExpressionAccess().getOpTildeKeyword_0_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_5, null);
	    }

)

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpPrimaryExpressionParserRuleCall_1_0()); 
	    }
		lv_exp_1_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_1_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPrefixValueSpecificationParserRuleCall_0()); 
	    }
		lv_prefix_0_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"prefix",
        		lv_prefix_0_0, 
        		"ValueSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleSuffixExpression
entryRuleSuffixExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuffixExpressionRule()); }
	 iv_ruleSuffixExpression=ruleSuffixExpression 
	 { $current=$iv_ruleSuffixExpression.current; } 
	 EOF 
;

// Rule SuffixExpression
ruleSuffixExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSuffixExpressionAccess().getOperationCallExpressionParserRuleCall_0()); 
    }
    this_OperationCallExpression_0=ruleOperationCallExpression
    { 
        $current = $this_OperationCallExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSuffixExpressionAccess().getPropertyCallExpressionParserRuleCall_1()); 
    }
    this_PropertyCallExpression_1=rulePropertyCallExpression
    { 
        $current = $this_PropertyCallExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSuffixExpressionAccess().getLinkOperationExpressionParserRuleCall_2()); 
    }
    this_LinkOperationExpression_2=ruleLinkOperationExpression
    { 
        $current = $this_LinkOperationExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSuffixExpressionAccess().getSequenceOperationExpressionParserRuleCall_3()); 
    }
    this_SequenceOperationExpression_3=ruleSequenceOperationExpression
    { 
        $current = $this_SequenceOperationExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSuffixExpressionAccess().getSequenceReductionExpressionParserRuleCall_4()); 
    }
    this_SequenceReductionExpression_4=ruleSequenceReductionExpression
    { 
        $current = $this_SequenceReductionExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSuffixExpressionAccess().getSequenceExpansionExpressionParserRuleCall_5()); 
    }
    this_SequenceExpansionExpression_5=ruleSequenceExpansionExpression
    { 
        $current = $this_SequenceExpansionExpression_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSuffixExpressionAccess().getClassExtentExpressionParserRuleCall_6()); 
    }
    this_ClassExtentExpression_6=ruleClassExtentExpression
    { 
        $current = $this_ClassExtentExpression_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOperationCallExpression
entryRuleOperationCallExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationCallExpressionRule()); }
	 iv_ruleOperationCallExpression=ruleOperationCallExpression 
	 { $current=$iv_ruleOperationCallExpression.current; } 
	 EOF 
;

// Rule OperationCallExpression
ruleOperationCallExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOperationCallExpressionAccess().getFullStopKeyword_0());
    }
(
(
		lv_operationName_1_0=RULE_ID
		{
			newLeafNode(lv_operationName_1_0, grammarAccess.getOperationCallExpressionAccess().getOperationNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationCallExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operationName",
        		lv_operationName_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallExpressionAccess().getTupleTupleParserRuleCall_2_0()); 
	    }
		lv_tuple_2_0=ruleTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallExpressionRule());
	        }
       		set(
       			$current, 
       			"tuple",
        		lv_tuple_2_0, 
        		"Tuple");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallExpressionAccess().getSuffixSuffixExpressionParserRuleCall_3_0()); 
	    }
		lv_suffix_3_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallExpressionRule());
	        }
       		set(
       			$current, 
       			"suffix",
        		lv_suffix_3_0, 
        		"SuffixExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRulePropertyCallExpression
entryRulePropertyCallExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyCallExpressionRule()); }
	 iv_rulePropertyCallExpression=rulePropertyCallExpression 
	 { $current=$iv_rulePropertyCallExpression.current; } 
	 EOF 
;

// Rule PropertyCallExpression
rulePropertyCallExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPropertyCallExpressionAccess().getFullStopKeyword_0());
    }
(
(
		lv_propertyName_1_0=RULE_ID
		{
			newLeafNode(lv_propertyName_1_0, grammarAccess.getPropertyCallExpressionAccess().getPropertyNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyCallExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"propertyName",
        		lv_propertyName_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPropertyCallExpressionAccess().getLeftSquareBracketKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyCallExpressionAccess().getIndexExpressionParserRuleCall_2_1_0()); 
	    }
		lv_index_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyCallExpressionRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPropertyCallExpressionAccess().getRightSquareBracketKeyword_2_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyCallExpressionAccess().getSuffixSuffixExpressionParserRuleCall_3_0()); 
	    }
		lv_suffix_5_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyCallExpressionRule());
	        }
       		set(
       			$current, 
       			"suffix",
        		lv_suffix_5_0, 
        		"SuffixExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleLinkOperationExpression
entryRuleLinkOperationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkOperationExpressionRule()); }
	 iv_ruleLinkOperationExpression=ruleLinkOperationExpression 
	 { $current=$iv_ruleLinkOperationExpression.current; } 
	 EOF 
;

// Rule LinkOperationExpression
ruleLinkOperationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLinkOperationExpressionAccess().getFullStopKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkOperationExpressionAccess().getKindLinkOperationKindEnumRuleCall_1_0()); 
	    }
		lv_kind_1_0=ruleLinkOperationKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkOperationExpressionRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_1_0, 
        		"LinkOperationKind");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkOperationExpressionAccess().getTupleLinkOperationTupleParserRuleCall_2_0()); 
	    }
		lv_tuple_2_0=ruleLinkOperationTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkOperationExpressionRule());
	        }
       		set(
       			$current, 
       			"tuple",
        		lv_tuple_2_0, 
        		"LinkOperationTuple");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLinkOperationTuple
entryRuleLinkOperationTuple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkOperationTupleRule()); }
	 iv_ruleLinkOperationTuple=ruleLinkOperationTuple 
	 { $current=$iv_ruleLinkOperationTuple.current; } 
	 EOF 
;

// Rule LinkOperationTuple
ruleLinkOperationTuple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLinkOperationTupleAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkOperationTupleAccess().getLinkOperationTupleElementLinkOperationTupleElementParserRuleCall_1_0()); 
	    }
		lv_linkOperationTupleElement_1_0=ruleLinkOperationTupleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkOperationTupleRule());
	        }
       		add(
       			$current, 
       			"linkOperationTupleElement",
        		lv_linkOperationTupleElement_1_0, 
        		"LinkOperationTupleElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLinkOperationTupleAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkOperationTupleAccess().getLinkOperationTupleElementLinkOperationTupleElementParserRuleCall_2_1_0()); 
	    }
		lv_linkOperationTupleElement_3_0=ruleLinkOperationTupleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkOperationTupleRule());
	        }
       		add(
       			$current, 
       			"linkOperationTupleElement",
        		lv_linkOperationTupleElement_3_0, 
        		"LinkOperationTupleElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLinkOperationTupleAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleLinkOperationTupleElement
entryRuleLinkOperationTupleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkOperationTupleElementRule()); }
	 iv_ruleLinkOperationTupleElement=ruleLinkOperationTupleElement 
	 { $current=$iv_ruleLinkOperationTupleElement.current; } 
	 EOF 
;

// Rule LinkOperationTupleElement
ruleLinkOperationTupleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_role_0_0=RULE_ID
		{
			newLeafNode(lv_role_0_0, grammarAccess.getLinkOperationTupleElementAccess().getRoleIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkOperationTupleElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"role",
        		lv_role_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLinkOperationTupleElementAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkOperationTupleElementAccess().getRoleIndexExpressionParserRuleCall_1_1_0()); 
	    }
		lv_roleIndex_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkOperationTupleElementRule());
	        }
       		set(
       			$current, 
       			"roleIndex",
        		lv_roleIndex_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLinkOperationTupleElementAccess().getRightSquareBracketKeyword_1_2());
    }
)?	otherlv_4='=>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLinkOperationTupleElementAccess().getEqualsSignGreaterThanSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkOperationTupleElementAccess().getObjectExpressionParserRuleCall_3_0()); 
	    }
		lv_object_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkOperationTupleElementRule());
	        }
       		set(
       			$current, 
       			"object",
        		lv_object_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSequenceOperationExpression
entryRuleSequenceOperationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceOperationExpressionRule()); }
	 iv_ruleSequenceOperationExpression=ruleSequenceOperationExpression 
	 { $current=$iv_ruleSequenceOperationExpression.current; } 
	 EOF 
;

// Rule SequenceOperationExpression
ruleSequenceOperationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='->' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSequenceOperationExpressionAccess().getHyphenMinusGreaterThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceOperationExpressionAccess().getOperationNameQualifiedNameWithBindingParserRuleCall_1_0()); 
	    }
		lv_operationName_1_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceOperationExpressionRule());
	        }
       		set(
       			$current, 
       			"operationName",
        		lv_operationName_1_0, 
        		"QualifiedNameWithBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceOperationExpressionAccess().getTupleTupleParserRuleCall_2_0()); 
	    }
		lv_tuple_2_0=ruleTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceOperationExpressionRule());
	        }
       		set(
       			$current, 
       			"tuple",
        		lv_tuple_2_0, 
        		"Tuple");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceOperationExpressionAccess().getSuffixSuffixExpressionParserRuleCall_3_0()); 
	    }
		lv_suffix_3_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceOperationExpressionRule());
	        }
       		set(
       			$current, 
       			"suffix",
        		lv_suffix_3_0, 
        		"SuffixExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleSequenceReductionExpression
entryRuleSequenceReductionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceReductionExpressionRule()); }
	 iv_ruleSequenceReductionExpression=ruleSequenceReductionExpression 
	 { $current=$iv_ruleSequenceReductionExpression.current; } 
	 EOF 
;

// Rule SequenceReductionExpression
ruleSequenceReductionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='->' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSequenceReductionExpressionAccess().getHyphenMinusGreaterThanSignKeyword_0());
    }
	otherlv_1='reduce' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSequenceReductionExpressionAccess().getReduceKeyword_1());
    }
(
(
		lv_isOrdered_2_0=	'ordered' 
    {
        newLeafNode(lv_isOrdered_2_0, grammarAccess.getSequenceReductionExpressionAccess().getIsOrderedOrderedKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSequenceReductionExpressionRule());
	        }
       		setWithLastConsumed($current, "isOrdered", true, "ordered");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceReductionExpressionAccess().getBehaviorQualifiedNameWithBindingParserRuleCall_3_0()); 
	    }
		lv_behavior_3_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceReductionExpressionRule());
	        }
       		set(
       			$current, 
       			"behavior",
        		lv_behavior_3_0, 
        		"QualifiedNameWithBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceReductionExpressionAccess().getSuffixSuffixExpressionParserRuleCall_4_0()); 
	    }
		lv_suffix_4_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceReductionExpressionRule());
	        }
       		set(
       			$current, 
       			"suffix",
        		lv_suffix_4_0, 
        		"SuffixExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleSequenceExpansionExpression
entryRuleSequenceExpansionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceExpansionExpressionRule()); }
	 iv_ruleSequenceExpansionExpression=ruleSequenceExpansionExpression 
	 { $current=$iv_ruleSequenceExpansionExpression.current; } 
	 EOF 
;

// Rule SequenceExpansionExpression
ruleSequenceExpansionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSequenceExpansionExpressionAccess().getSelectOrRejectOperationParserRuleCall_0()); 
    }
    this_SelectOrRejectOperation_0=ruleSelectOrRejectOperation
    { 
        $current = $this_SelectOrRejectOperation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSequenceExpansionExpressionAccess().getCollectOrIterateOperationParserRuleCall_1()); 
    }
    this_CollectOrIterateOperation_1=ruleCollectOrIterateOperation
    { 
        $current = $this_CollectOrIterateOperation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSequenceExpansionExpressionAccess().getForAllOrExistsOrOneOperationParserRuleCall_2()); 
    }
    this_ForAllOrExistsOrOneOperation_2=ruleForAllOrExistsOrOneOperation
    { 
        $current = $this_ForAllOrExistsOrOneOperation_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSequenceExpansionExpressionAccess().getIsUniqueOperationParserRuleCall_3()); 
    }
    this_IsUniqueOperation_3=ruleIsUniqueOperation
    { 
        $current = $this_IsUniqueOperation_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSelectOrRejectOperation
entryRuleSelectOrRejectOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectOrRejectOperationRule()); }
	 iv_ruleSelectOrRejectOperation=ruleSelectOrRejectOperation 
	 { $current=$iv_ruleSelectOrRejectOperation.current; } 
	 EOF 
;

// Rule SelectOrRejectOperation
ruleSelectOrRejectOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='->' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectOrRejectOperationAccess().getHyphenMinusGreaterThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectOrRejectOperationAccess().getOpSelectOrRejectOperatorEnumRuleCall_1_0()); 
	    }
		lv_op_1_0=ruleSelectOrRejectOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectOrRejectOperationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"SelectOrRejectOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getSelectOrRejectOperationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectOrRejectOperationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSelectOrRejectOperationAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectOrRejectOperationAccess().getExprExpressionParserRuleCall_4_0()); 
	    }
		lv_expr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectOrRejectOperationRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSelectOrRejectOperationAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectOrRejectOperationAccess().getSuffixSuffixExpressionParserRuleCall_6_0()); 
	    }
		lv_suffix_6_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectOrRejectOperationRule());
	        }
       		set(
       			$current, 
       			"suffix",
        		lv_suffix_6_0, 
        		"SuffixExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleCollectOrIterateOperation
entryRuleCollectOrIterateOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCollectOrIterateOperationRule()); }
	 iv_ruleCollectOrIterateOperation=ruleCollectOrIterateOperation 
	 { $current=$iv_ruleCollectOrIterateOperation.current; } 
	 EOF 
;

// Rule CollectOrIterateOperation
ruleCollectOrIterateOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='->' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCollectOrIterateOperationAccess().getHyphenMinusGreaterThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCollectOrIterateOperationAccess().getOpCollectOrIterateOperatorEnumRuleCall_1_0()); 
	    }
		lv_op_1_0=ruleCollectOrIterateOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectOrIterateOperationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"CollectOrIterateOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getCollectOrIterateOperationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectOrIterateOperationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCollectOrIterateOperationAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCollectOrIterateOperationAccess().getExprExpressionParserRuleCall_4_0()); 
	    }
		lv_expr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectOrIterateOperationRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCollectOrIterateOperationAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCollectOrIterateOperationAccess().getSuffixSuffixExpressionParserRuleCall_6_0()); 
	    }
		lv_suffix_6_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectOrIterateOperationRule());
	        }
       		set(
       			$current, 
       			"suffix",
        		lv_suffix_6_0, 
        		"SuffixExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleForAllOrExistsOrOneOperation
entryRuleForAllOrExistsOrOneOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForAllOrExistsOrOneOperationRule()); }
	 iv_ruleForAllOrExistsOrOneOperation=ruleForAllOrExistsOrOneOperation 
	 { $current=$iv_ruleForAllOrExistsOrOneOperation.current; } 
	 EOF 
;

// Rule ForAllOrExistsOrOneOperation
ruleForAllOrExistsOrOneOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='->' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForAllOrExistsOrOneOperationAccess().getHyphenMinusGreaterThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAllOrExistsOrOneOperationAccess().getOpForAllOrExistsOrOneOperatorEnumRuleCall_1_0()); 
	    }
		lv_op_1_0=ruleForAllOrExistsOrOneOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForAllOrExistsOrOneOperationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"ForAllOrExistsOrOneOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getForAllOrExistsOrOneOperationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForAllOrExistsOrOneOperationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForAllOrExistsOrOneOperationAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAllOrExistsOrOneOperationAccess().getExprExpressionParserRuleCall_4_0()); 
	    }
		lv_expr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForAllOrExistsOrOneOperationRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getForAllOrExistsOrOneOperationAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAllOrExistsOrOneOperationAccess().getSuffixSuffixExpressionParserRuleCall_6_0()); 
	    }
		lv_suffix_6_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForAllOrExistsOrOneOperationRule());
	        }
       		set(
       			$current, 
       			"suffix",
        		lv_suffix_6_0, 
        		"SuffixExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleIsUniqueOperation
entryRuleIsUniqueOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsUniqueOperationRule()); }
	 iv_ruleIsUniqueOperation=ruleIsUniqueOperation 
	 { $current=$iv_ruleIsUniqueOperation.current; } 
	 EOF 
;

// Rule IsUniqueOperation
ruleIsUniqueOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='->' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIsUniqueOperationAccess().getHyphenMinusGreaterThanSignKeyword_0());
    }
	otherlv_1='isUnique' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIsUniqueOperationAccess().getIsUniqueKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getIsUniqueOperationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsUniqueOperationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIsUniqueOperationAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIsUniqueOperationAccess().getExprExpressionParserRuleCall_4_0()); 
	    }
		lv_expr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIsUniqueOperationRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIsUniqueOperationAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIsUniqueOperationAccess().getSuffixSuffixExpressionParserRuleCall_6_0()); 
	    }
		lv_suffix_6_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIsUniqueOperationRule());
	        }
       		set(
       			$current, 
       			"suffix",
        		lv_suffix_6_0, 
        		"SuffixExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleValueSpecification
entryRuleValueSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueSpecificationRule()); }
	 iv_ruleValueSpecification=ruleValueSpecification 
	 { $current=$iv_ruleValueSpecification.current; } 
	 EOF 
;

// Rule ValueSpecification
ruleValueSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueSpecificationAccess().getNameExpressionParserRuleCall_0()); 
    }
    this_NameExpression_0=ruleNameExpression
    { 
        $current = $this_NameExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueSpecificationAccess().getLITERALParserRuleCall_1()); 
    }
    this_LITERAL_1=ruleLITERAL
    { 
        $current = $this_LITERAL_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueSpecificationAccess().getThisExpressionParserRuleCall_2()); 
    }
    this_ThisExpression_2=ruleThisExpression
    { 
        $current = $this_ThisExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueSpecificationAccess().getSuperInvocationExpressionParserRuleCall_3()); 
    }
    this_SuperInvocationExpression_3=ruleSuperInvocationExpression
    { 
        $current = $this_SuperInvocationExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueSpecificationAccess().getInstanceCreationExpressionParserRuleCall_4()); 
    }
    this_InstanceCreationExpression_4=ruleInstanceCreationExpression
    { 
        $current = $this_InstanceCreationExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueSpecificationAccess().getParenthesizedExpressionParserRuleCall_5()); 
    }
    this_ParenthesizedExpression_5=ruleParenthesizedExpression
    { 
        $current = $this_ParenthesizedExpression_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueSpecificationAccess().getNullExpressionParserRuleCall_6()); 
    }
    this_NullExpression_6=ruleNullExpression
    { 
        $current = $this_NullExpression_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNonLiteralValueSpecification
entryRuleNonLiteralValueSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonLiteralValueSpecificationRule()); }
	 iv_ruleNonLiteralValueSpecification=ruleNonLiteralValueSpecification 
	 { $current=$iv_ruleNonLiteralValueSpecification.current; } 
	 EOF 
;

// Rule NonLiteralValueSpecification
ruleNonLiteralValueSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNonLiteralValueSpecificationAccess().getNameExpressionParserRuleCall_0()); 
    }
    this_NameExpression_0=ruleNameExpression
    { 
        $current = $this_NameExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNonLiteralValueSpecificationAccess().getParenthesizedExpressionParserRuleCall_1()); 
    }
    this_ParenthesizedExpression_1=ruleParenthesizedExpression
    { 
        $current = $this_ParenthesizedExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNonLiteralValueSpecificationAccess().getInstanceCreationExpressionParserRuleCall_2()); 
    }
    this_InstanceCreationExpression_2=ruleInstanceCreationExpression
    { 
        $current = $this_InstanceCreationExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNonLiteralValueSpecificationAccess().getThisExpressionParserRuleCall_3()); 
    }
    this_ThisExpression_3=ruleThisExpression
    { 
        $current = $this_ThisExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNonLiteralValueSpecificationAccess().getSuperInvocationExpressionParserRuleCall_4()); 
    }
    this_SuperInvocationExpression_4=ruleSuperInvocationExpression
    { 
        $current = $this_SuperInvocationExpression_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesizedExpressionRule()); }
	 iv_ruleParenthesizedExpression=ruleParenthesizedExpression 
	 { $current=$iv_ruleParenthesizedExpression.current; } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getExpOrTypeCastExpressionParserRuleCall_1_0()); 
	    }
		lv_expOrTypeCast_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesizedExpressionRule());
	        }
       		set(
       			$current, 
       			"expOrTypeCast",
        		lv_expOrTypeCast_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getCastedNonLiteralValueSpecificationParserRuleCall_3_0_0()); 
	    }
		lv_casted_3_0=ruleNonLiteralValueSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesizedExpressionRule());
	        }
       		set(
       			$current, 
       			"casted",
        		lv_casted_3_0, 
        		"NonLiteralValueSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getSuffixSuffixExpressionParserRuleCall_3_1_0()); 
	    }
		lv_suffix_4_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesizedExpressionRule());
	        }
       		set(
       			$current, 
       			"suffix",
        		lv_suffix_4_0, 
        		"SuffixExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleNullExpression
entryRuleNullExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullExpressionRule()); }
	 iv_ruleNullExpression=ruleNullExpression 
	 { $current=$iv_ruleNullExpression.current; } 
	 EOF 
;

// Rule NullExpression
ruleNullExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNullExpressionAccess().getNullExpressionAction_0(),
            $current);
    }
)	otherlv_1='null' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNullExpressionAccess().getNullKeyword_1());
    }
)
;





// Entry rule entryRuleThisExpression
entryRuleThisExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getThisExpressionRule()); }
	 iv_ruleThisExpression=ruleThisExpression 
	 { $current=$iv_ruleThisExpression.current; } 
	 EOF 
;

// Rule ThisExpression
ruleThisExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getThisExpressionAccess().getThisExpressionAction_0(),
            $current);
    }
)	otherlv_1='this' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getThisExpressionAccess().getThisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getThisExpressionAccess().getSuffixSuffixExpressionParserRuleCall_2_0()); 
	    }
		lv_suffix_2_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThisExpressionRule());
	        }
       		set(
       			$current, 
       			"suffix",
        		lv_suffix_2_0, 
        		"SuffixExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleSuperInvocationExpression
entryRuleSuperInvocationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuperInvocationExpressionRule()); }
	 iv_ruleSuperInvocationExpression=ruleSuperInvocationExpression 
	 { $current=$iv_ruleSuperInvocationExpression.current; } 
	 EOF 
;

// Rule SuperInvocationExpression
ruleSuperInvocationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='super' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSuperInvocationExpressionAccess().getSuperKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSuperInvocationExpressionAccess().getTupleTupleParserRuleCall_1_0_0()); 
	    }
		lv_tuple_1_0=ruleTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuperInvocationExpressionRule());
	        }
       		set(
       			$current, 
       			"tuple",
        		lv_tuple_1_0, 
        		"Tuple");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSuperInvocationExpressionAccess().getFullStopKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSuperInvocationExpressionAccess().getOperationNameQualifiedNameWithBindingParserRuleCall_1_1_1_0()); 
	    }
		lv_operationName_3_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuperInvocationExpressionRule());
	        }
       		set(
       			$current, 
       			"operationName",
        		lv_operationName_3_0, 
        		"QualifiedNameWithBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSuperInvocationExpressionAccess().getTupleTupleParserRuleCall_1_1_2_0()); 
	    }
		lv_tuple_4_0=ruleTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuperInvocationExpressionRule());
	        }
       		set(
       			$current, 
       			"tuple",
        		lv_tuple_4_0, 
        		"Tuple");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleInstanceCreationExpression
entryRuleInstanceCreationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceCreationExpressionRule()); }
	 iv_ruleInstanceCreationExpression=ruleInstanceCreationExpression 
	 { $current=$iv_ruleInstanceCreationExpression.current; } 
	 EOF 
;

// Rule InstanceCreationExpression
ruleInstanceCreationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInstanceCreationExpressionAccess().getNewKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceCreationExpressionAccess().getConstructorQualifiedNameWithBindingParserRuleCall_1_0()); 
	    }
		lv_constructor_1_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceCreationExpressionRule());
	        }
       		set(
       			$current, 
       			"constructor",
        		lv_constructor_1_0, 
        		"QualifiedNameWithBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceCreationExpressionAccess().getTupleInstanceCreationTupleParserRuleCall_2_0()); 
	    }
		lv_tuple_2_0=ruleInstanceCreationTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceCreationExpressionRule());
	        }
       		set(
       			$current, 
       			"tuple",
        		lv_tuple_2_0, 
        		"InstanceCreationTuple");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceCreationExpressionAccess().getSuffixSuffixExpressionParserRuleCall_3_0()); 
	    }
		lv_suffix_3_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceCreationExpressionRule());
	        }
       		set(
       			$current, 
       			"suffix",
        		lv_suffix_3_0, 
        		"SuffixExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleInstanceCreationTuple
entryRuleInstanceCreationTuple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceCreationTupleRule()); }
	 iv_ruleInstanceCreationTuple=ruleInstanceCreationTuple 
	 { $current=$iv_ruleInstanceCreationTuple.current; } 
	 EOF 
;

// Rule InstanceCreationTuple
ruleInstanceCreationTuple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getInstanceCreationTupleAccess().getInstanceCreationTupleAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstanceCreationTupleAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceCreationTupleAccess().getInstanceCreationTupleElementInstanceCreationTupleElementParserRuleCall_2_0_0()); 
	    }
		lv_instanceCreationTupleElement_2_0=ruleInstanceCreationTupleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceCreationTupleRule());
	        }
       		add(
       			$current, 
       			"instanceCreationTupleElement",
        		lv_instanceCreationTupleElement_2_0, 
        		"InstanceCreationTupleElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInstanceCreationTupleAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceCreationTupleAccess().getInstanceCreationTupleElementInstanceCreationTupleElementParserRuleCall_2_1_1_0()); 
	    }
		lv_instanceCreationTupleElement_4_0=ruleInstanceCreationTupleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceCreationTupleRule());
	        }
       		add(
       			$current, 
       			"instanceCreationTupleElement",
        		lv_instanceCreationTupleElement_4_0, 
        		"InstanceCreationTupleElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInstanceCreationTupleAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleInstanceCreationTupleElement
entryRuleInstanceCreationTupleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceCreationTupleElementRule()); }
	 iv_ruleInstanceCreationTupleElement=ruleInstanceCreationTupleElement 
	 { $current=$iv_ruleInstanceCreationTupleElement.current; } 
	 EOF 
;

// Rule InstanceCreationTupleElement
ruleInstanceCreationTupleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_role_0_0=RULE_ID
		{
			newLeafNode(lv_role_0_0, grammarAccess.getInstanceCreationTupleElementAccess().getRoleIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceCreationTupleElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"role",
        		lv_role_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstanceCreationTupleElementAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceCreationTupleElementAccess().getObjectExpressionParserRuleCall_2_0()); 
	    }
		lv_object_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceCreationTupleElementRule());
	        }
       		set(
       			$current, 
       			"object",
        		lv_object_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSequenceConstructionOrAccessCompletion
entryRuleSequenceConstructionOrAccessCompletion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceConstructionOrAccessCompletionRule()); }
	 iv_ruleSequenceConstructionOrAccessCompletion=ruleSequenceConstructionOrAccessCompletion 
	 { $current=$iv_ruleSequenceConstructionOrAccessCompletion.current; } 
	 EOF 
;

// Rule SequenceConstructionOrAccessCompletion
ruleSequenceConstructionOrAccessCompletion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_multiplicityIndicator_0_0=	'[' 
    {
        newLeafNode(lv_multiplicityIndicator_0_0, grammarAccess.getSequenceConstructionOrAccessCompletionAccess().getMultiplicityIndicatorLeftSquareBracketKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSequenceConstructionOrAccessCompletionRule());
	        }
       		setWithLastConsumed($current, "multiplicityIndicator", true, "[");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceConstructionOrAccessCompletionAccess().getAccessCompletionAccessCompletionParserRuleCall_0_1_0_0()); 
	    }
		lv_accessCompletion_1_0=ruleAccessCompletion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceConstructionOrAccessCompletionRule());
	        }
       		set(
       			$current, 
       			"accessCompletion",
        		lv_accessCompletion_1_0, 
        		"AccessCompletion");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceConstructionOrAccessCompletionAccess().getSequenceCompletionPartialSequenceConstructionCompletionParserRuleCall_0_1_1_0()); 
	    }
		lv_sequenceCompletion_2_0=rulePartialSequenceConstructionCompletion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceConstructionOrAccessCompletionRule());
	        }
       		set(
       			$current, 
       			"sequenceCompletion",
        		lv_sequenceCompletion_2_0, 
        		"PartialSequenceConstructionCompletion");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceConstructionOrAccessCompletionAccess().getExpressionSequenceConstructionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_3_0=ruleSequenceConstructionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceConstructionOrAccessCompletionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"SequenceConstructionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAccessCompletion
entryRuleAccessCompletion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAccessCompletionRule()); }
	 iv_ruleAccessCompletion=ruleAccessCompletion 
	 { $current=$iv_ruleAccessCompletion.current; } 
	 EOF 
;

// Rule AccessCompletion
ruleAccessCompletion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAccessCompletionAccess().getAccessIndexExpressionParserRuleCall_0_0()); 
	    }
		lv_accessIndex_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessCompletionRule());
	        }
       		set(
       			$current, 
       			"accessIndex",
        		lv_accessIndex_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=']' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAccessCompletionAccess().getRightSquareBracketKeyword_1());
    }
)
;





// Entry rule entryRulePartialSequenceConstructionCompletion
entryRulePartialSequenceConstructionCompletion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPartialSequenceConstructionCompletionRule()); }
	 iv_rulePartialSequenceConstructionCompletion=rulePartialSequenceConstructionCompletion 
	 { $current=$iv_rulePartialSequenceConstructionCompletion.current; } 
	 EOF 
;

// Rule PartialSequenceConstructionCompletion
rulePartialSequenceConstructionCompletion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0=']' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPartialSequenceConstructionCompletionAccess().getRightSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPartialSequenceConstructionCompletionAccess().getExpressionSequenceConstructionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleSequenceConstructionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPartialSequenceConstructionCompletionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"SequenceConstructionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSequenceConstructionExpression
entryRuleSequenceConstructionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceConstructionExpressionRule()); }
	 iv_ruleSequenceConstructionExpression=ruleSequenceConstructionExpression 
	 { $current=$iv_ruleSequenceConstructionExpression.current; } 
	 EOF 
;

// Rule SequenceConstructionExpression
ruleSequenceConstructionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSequenceConstructionExpressionAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceConstructionExpressionAccess().getSequenceElementSequenceElementParserRuleCall_1_0()); 
	    }
		lv_sequenceElement_1_0=ruleSequenceElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceConstructionExpressionRule());
	        }
       		add(
       			$current, 
       			"sequenceElement",
        		lv_sequenceElement_1_0, 
        		"SequenceElement");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSequenceConstructionExpressionAccess().getCommaKeyword_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceConstructionExpressionAccess().getSequenceElementSequenceElementParserRuleCall_2_0_1_0()); 
	    }
		lv_sequenceElement_3_0=ruleSequenceElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceConstructionExpressionRule());
	        }
       		add(
       			$current, 
       			"sequenceElement",
        		lv_sequenceElement_3_0, 
        		"SequenceElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*
    |(	otherlv_4='..' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSequenceConstructionExpressionAccess().getFullStopFullStopKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceConstructionExpressionAccess().getRangeUpperExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_rangeUpper_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceConstructionExpressionRule());
	        }
       		set(
       			$current, 
       			"rangeUpper",
        		lv_rangeUpper_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSequenceConstructionExpressionAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleSequenceElement
entryRuleSequenceElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceElementRule()); }
	 iv_ruleSequenceElement=ruleSequenceElement 
	 { $current=$iv_ruleSequenceElement.current; } 
	 EOF 
;

// Rule SequenceElement
ruleSequenceElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSequenceElementAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSequenceElementAccess().getSequenceConstructionExpressionParserRuleCall_1()); 
    }
    this_SequenceConstructionExpression_1=ruleSequenceConstructionExpression
    { 
        $current = $this_SequenceConstructionExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleClassExtentExpression
entryRuleClassExtentExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassExtentExpressionRule()); }
	 iv_ruleClassExtentExpression=ruleClassExtentExpression 
	 { $current=$iv_ruleClassExtentExpression.current; } 
	 EOF 
;

// Rule ClassExtentExpression
ruleClassExtentExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getClassExtentExpressionAccess().getClassExtentExpressionAction_0(),
            $current);
    }
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClassExtentExpressionAccess().getFullStopKeyword_1());
    }
	otherlv_2='allInstances' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassExtentExpressionAccess().getAllInstancesKeyword_2());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClassExtentExpressionAccess().getLeftParenthesisKeyword_3());
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassExtentExpressionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getSequenceStatementSequenceParserRuleCall_2_0()); 
	    }
		lv_sequence_2_0=ruleStatementSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		set(
       			$current, 
       			"sequence",
        		lv_sequence_2_0, 
        		"StatementSequence");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleStatementSequence
entryRuleStatementSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementSequenceRule()); }
	 iv_ruleStatementSequence=ruleStatementSequence 
	 { $current=$iv_ruleStatementSequence.current; } 
	 EOF 
;

// Rule StatementSequence
ruleStatementSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementSequenceAccess().getStatementsDocumentedStatementParserRuleCall_0()); 
	    }
		lv_statements_0_0=ruleDocumentedStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementSequenceRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"DocumentedStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleDocumentedStatement
entryRuleDocumentedStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDocumentedStatementRule()); }
	 iv_ruleDocumentedStatement=ruleDocumentedStatement 
	 { $current=$iv_ruleDocumentedStatement.current; } 
	 EOF 
;

// Rule DocumentedStatement
ruleDocumentedStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_comment_0_1=RULE_ML_COMMENT
		{
			newLeafNode(lv_comment_0_1, grammarAccess.getDocumentedStatementAccess().getCommentML_COMMENTTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDocumentedStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_0_1, 
        		"ML_COMMENT");
	    }

    |		lv_comment_0_2=RULE_SL_COMMENT
		{
			newLeafNode(lv_comment_0_2, grammarAccess.getDocumentedStatementAccess().getCommentSL_COMMENTTerminalRuleCall_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDocumentedStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_0_2, 
        		"SL_COMMENT");
	    }

)

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDocumentedStatementAccess().getStatementStatementParserRuleCall_1_0()); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDocumentedStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInlineStatement
entryRuleInlineStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInlineStatementRule()); }
	 iv_ruleInlineStatement=ruleInlineStatement 
	 { $current=$iv_ruleInlineStatement.current; } 
	 EOF 
;

// Rule InlineStatement
ruleInlineStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='/*@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInlineStatementAccess().getSolidusAsteriskCommercialAtKeyword_0());
    }
	otherlv_1='inline' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInlineStatementAccess().getInlineKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInlineStatementAccess().getLeftParenthesisKeyword_2());
    }
(
(
		lv_langageName_3_0=RULE_ID
		{
			newLeafNode(lv_langageName_3_0, grammarAccess.getInlineStatementAccess().getLangageNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInlineStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"langageName",
        		lv_langageName_3_0, 
        		"ID");
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInlineStatementAccess().getRightParenthesisKeyword_4());
    }
(
(
		lv_body_5_0=RULE_STRING
		{
			newLeafNode(lv_body_5_0, grammarAccess.getInlineStatementAccess().getBodySTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInlineStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"body",
        		lv_body_5_0, 
        		"STRING");
	    }

)
)	otherlv_6='*/' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInlineStatementAccess().getAsteriskSolidusKeyword_6());
    }
)
;





// Entry rule entryRuleAnnotatedStatement
entryRuleAnnotatedStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotatedStatementRule()); }
	 iv_ruleAnnotatedStatement=ruleAnnotatedStatement 
	 { $current=$iv_ruleAnnotatedStatement.current; } 
	 EOF 
;

// Rule AnnotatedStatement
ruleAnnotatedStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='//@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnnotatedStatementAccess().getSolidusSolidusCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotatedStatementAccess().getAnnotationAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotation_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotatedStatementRule());
	        }
       		set(
       			$current, 
       			"annotation",
        		lv_annotation_1_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotatedStatementAccess().getStatementStatementParserRuleCall_2_0()); 
	    }
		lv_statement_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotatedStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getAnnotatedStatementParserRuleCall_0()); 
    }
    this_AnnotatedStatement_0=ruleAnnotatedStatement
    { 
        $current = $this_AnnotatedStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getInlineStatementParserRuleCall_1()); 
    }
    this_InlineStatement_1=ruleInlineStatement
    { 
        $current = $this_InlineStatement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBlockStatementParserRuleCall_2()); 
    }
    this_BlockStatement_2=ruleBlockStatement
    { 
        $current = $this_BlockStatement_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getEmptyStatementParserRuleCall_3()); 
    }
    this_EmptyStatement_3=ruleEmptyStatement
    { 
        $current = $this_EmptyStatement_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getLocalNameDeclarationStatementParserRuleCall_4()); 
    }
    this_LocalNameDeclarationStatement_4=ruleLocalNameDeclarationStatement
    { 
        $current = $this_LocalNameDeclarationStatement_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_5()); 
    }
    this_IfStatement_5=ruleIfStatement
    { 
        $current = $this_IfStatement_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_6()); 
    }
    this_SwitchStatement_6=ruleSwitchStatement
    { 
        $current = $this_SwitchStatement_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_7()); 
    }
    this_WhileStatement_7=ruleWhileStatement
    { 
        $current = $this_WhileStatement_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDoStatementParserRuleCall_8()); 
    }
    this_DoStatement_8=ruleDoStatement
    { 
        $current = $this_DoStatement_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getForStatementParserRuleCall_9()); 
    }
    this_ForStatement_9=ruleForStatement
    { 
        $current = $this_ForStatement_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_10()); 
    }
    this_BreakStatement_10=ruleBreakStatement
    { 
        $current = $this_BreakStatement_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_11()); 
    }
    this_ReturnStatement_11=ruleReturnStatement
    { 
        $current = $this_ReturnStatement_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getAcceptStatementParserRuleCall_12()); 
    }
    this_AcceptStatement_12=ruleAcceptStatement
    { 
        $current = $this_AcceptStatement_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getClassifyStatementParserRuleCall_13()); 
    }
    this_ClassifyStatement_13=ruleClassifyStatement
    { 
        $current = $this_ClassifyStatement_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getInvocationOrAssignementOrDeclarationStatementParserRuleCall_14()); 
    }
    this_InvocationOrAssignementOrDeclarationStatement_14=ruleInvocationOrAssignementOrDeclarationStatement
    { 
        $current = $this_InvocationOrAssignementOrDeclarationStatement_14.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSuperInvocationStatementParserRuleCall_15()); 
    }
    this_SuperInvocationStatement_15=ruleSuperInvocationStatement
    { 
        $current = $this_SuperInvocationStatement_15.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getThisInvocationStatementParserRuleCall_16()); 
    }
    this_ThisInvocationStatement_16=ruleThisInvocationStatement
    { 
        $current = $this_ThisInvocationStatement_16.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getInstanceCreationInvocationStatementParserRuleCall_17()); 
    }
    this_InstanceCreationInvocationStatement_17=ruleInstanceCreationInvocationStatement
    { 
        $current = $this_InstanceCreationInvocationStatement_17.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getKindAnnotationKindEnumRuleCall_0_0()); 
	    }
		lv_kind_0_0=ruleAnnotationKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_0_0, 
        		"AnnotationKind");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		lv_args_2_0=RULE_ID
		{
			newLeafNode(lv_args_2_0, grammarAccess.getAnnotationAccess().getArgsIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAnnotationAccess().getCommaKeyword_1_2_0());
    }
(
(
		lv_args_4_0=RULE_ID
		{
			newLeafNode(lv_args_4_0, grammarAccess.getAnnotationAccess().getArgsIDTerminalRuleCall_1_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"ID");
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleBlockStatement
entryRuleBlockStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockStatementRule()); }
	 iv_ruleBlockStatement=ruleBlockStatement 
	 { $current=$iv_ruleBlockStatement.current; } 
	 EOF 
;

// Rule BlockStatement
ruleBlockStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockStatementAccess().getBlockBlockParserRuleCall_0()); 
	    }
		lv_block_0_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockStatementRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_0_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleEmptyStatement
entryRuleEmptyStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEmptyStatementRule()); }
	 iv_ruleEmptyStatement=ruleEmptyStatement 
	 { $current=$iv_ruleEmptyStatement.current; } 
	 EOF 
;

// Rule EmptyStatement
ruleEmptyStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEmptyStatementAccess().getEmptyStatementAction_0(),
            $current);
    }
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleLocalNameDeclarationStatement
entryRuleLocalNameDeclarationStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalNameDeclarationStatementRule()); }
	 iv_ruleLocalNameDeclarationStatement=ruleLocalNameDeclarationStatement 
	 { $current=$iv_ruleLocalNameDeclarationStatement.current; } 
	 EOF 
;

// Rule LocalNameDeclarationStatement
ruleLocalNameDeclarationStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='let' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLocalNameDeclarationStatementAccess().getLetKeyword_0());
    }
(
(
		lv_varName_1_0=RULE_ID
		{
			newLeafNode(lv_varName_1_0, grammarAccess.getLocalNameDeclarationStatementAccess().getVarNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalNameDeclarationStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"varName",
        		lv_varName_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocalNameDeclarationStatementAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalNameDeclarationStatementAccess().getTypeQualifiedNameWithBindingParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalNameDeclarationStatementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"QualifiedNameWithBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_multiplicityIndicator_4_0=	'[' 
    {
        newLeafNode(lv_multiplicityIndicator_4_0, grammarAccess.getLocalNameDeclarationStatementAccess().getMultiplicityIndicatorLeftSquareBracketKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalNameDeclarationStatementRule());
	        }
       		setWithLastConsumed($current, "multiplicityIndicator", true, "[");
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLocalNameDeclarationStatementAccess().getRightSquareBracketKeyword_4_1());
    }
)?	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLocalNameDeclarationStatementAccess().getEqualsSignKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalNameDeclarationStatementAccess().getInitSequenceElementParserRuleCall_6_0()); 
	    }
		lv_init_7_0=ruleSequenceElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalNameDeclarationStatementRule());
	        }
       		set(
       			$current, 
       			"init",
        		lv_init_7_0, 
        		"SequenceElement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getLocalNameDeclarationStatementAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getSequentialClaussesSequentialClausesParserRuleCall_1_0()); 
	    }
		lv_sequentialClausses_1_0=ruleSequentialClauses		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"sequentialClausses",
        		lv_sequentialClausses_1_0, 
        		"SequentialClauses");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getFinalClauseFinalClauseParserRuleCall_2_0()); 
	    }
		lv_finalClause_2_0=ruleFinalClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"finalClause",
        		lv_finalClause_2_0, 
        		"FinalClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleSequentialClauses
entryRuleSequentialClauses returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequentialClausesRule()); }
	 iv_ruleSequentialClauses=ruleSequentialClauses 
	 { $current=$iv_ruleSequentialClauses.current; } 
	 EOF 
;

// Rule SequentialClauses
ruleSequentialClauses returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSequentialClausesAccess().getConccurentClausesConcurrentClausesParserRuleCall_0_0()); 
	    }
		lv_conccurentClauses_0_0=ruleConcurrentClauses		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequentialClausesRule());
	        }
       		add(
       			$current, 
       			"conccurentClauses",
        		lv_conccurentClauses_0_0, 
        		"ConcurrentClauses");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='else' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSequentialClausesAccess().getElseKeyword_1_0());
    }
	otherlv_2='if' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSequentialClausesAccess().getIfKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequentialClausesAccess().getConccurentClausesConcurrentClausesParserRuleCall_1_2_0()); 
	    }
		lv_conccurentClauses_3_0=ruleConcurrentClauses		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequentialClausesRule());
	        }
       		add(
       			$current, 
       			"conccurentClauses",
        		lv_conccurentClauses_3_0, 
        		"ConcurrentClauses");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConcurrentClauses
entryRuleConcurrentClauses returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConcurrentClausesRule()); }
	 iv_ruleConcurrentClauses=ruleConcurrentClauses 
	 { $current=$iv_ruleConcurrentClauses.current; } 
	 EOF 
;

// Rule ConcurrentClauses
ruleConcurrentClauses returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConcurrentClausesAccess().getNonFinalClauseNonFinalClauseParserRuleCall_0_0()); 
	    }
		lv_nonFinalClause_0_0=ruleNonFinalClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConcurrentClausesRule());
	        }
       		add(
       			$current, 
       			"nonFinalClause",
        		lv_nonFinalClause_0_0, 
        		"NonFinalClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='or' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConcurrentClausesAccess().getOrKeyword_1_0());
    }
	otherlv_2='if' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConcurrentClausesAccess().getIfKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConcurrentClausesAccess().getNonFinalClauseNonFinalClauseParserRuleCall_1_2_0()); 
	    }
		lv_nonFinalClause_3_0=ruleNonFinalClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConcurrentClausesRule());
	        }
       		add(
       			$current, 
       			"nonFinalClause",
        		lv_nonFinalClause_3_0, 
        		"NonFinalClause");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNonFinalClause
entryRuleNonFinalClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonFinalClauseRule()); }
	 iv_ruleNonFinalClause=ruleNonFinalClause 
	 { $current=$iv_ruleNonFinalClause.current; } 
	 EOF 
;

// Rule NonFinalClause
ruleNonFinalClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNonFinalClauseAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNonFinalClauseAccess().getConditionExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNonFinalClauseRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNonFinalClauseAccess().getRightParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNonFinalClauseAccess().getBlockBlockParserRuleCall_3_0()); 
	    }
		lv_block_3_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNonFinalClauseRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_3_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFinalClause
entryRuleFinalClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFinalClauseRule()); }
	 iv_ruleFinalClause=ruleFinalClause 
	 { $current=$iv_ruleFinalClause.current; } 
	 EOF 
;

// Rule FinalClause
ruleFinalClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='else' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFinalClauseAccess().getElseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFinalClauseAccess().getBlockBlockParserRuleCall_1_0()); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFinalClauseRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_1_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSwitchStatement
entryRuleSwitchStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchStatementRule()); }
	 iv_ruleSwitchStatement=ruleSwitchStatement 
	 { $current=$iv_ruleSwitchStatement.current; } 
	 EOF 
;

// Rule SwitchStatement
ruleSwitchStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='switch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchStatementAccess().getSwitchClauseSwitchClauseParserRuleCall_5_0()); 
	    }
		lv_switchClause_5_0=ruleSwitchClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
	        }
       		add(
       			$current, 
       			"switchClause",
        		lv_switchClause_5_0, 
        		"SwitchClause");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchStatementAccess().getDefaultClauseSwitchDefaultClauseParserRuleCall_6_0()); 
	    }
		lv_defaultClause_6_0=ruleSwitchDefaultClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
	        }
       		set(
       			$current, 
       			"defaultClause",
        		lv_defaultClause_6_0, 
        		"SwitchDefaultClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleSwitchClause
entryRuleSwitchClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchClauseRule()); }
	 iv_ruleSwitchClause=ruleSwitchClause 
	 { $current=$iv_ruleSwitchClause.current; } 
	 EOF 
;

// Rule SwitchClause
ruleSwitchClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchClauseAccess().getSwitchCaseSwitchCaseParserRuleCall_0_0()); 
	    }
		lv_switchCase_0_0=ruleSwitchCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchClauseRule());
	        }
       		add(
       			$current, 
       			"switchCase",
        		lv_switchCase_0_0, 
        		"SwitchCase");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchClauseAccess().getSwitchCaseSwitchCaseParserRuleCall_1_0()); 
	    }
		lv_switchCase_1_0=ruleSwitchCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchClauseRule());
	        }
       		add(
       			$current, 
       			"switchCase",
        		lv_switchCase_1_0, 
        		"SwitchCase");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchClauseAccess().getStatementSequenceNonEmptyStatementSequenceParserRuleCall_2_0()); 
	    }
		lv_statementSequence_2_0=ruleNonEmptyStatementSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchClauseRule());
	        }
       		set(
       			$current, 
       			"statementSequence",
        		lv_statementSequence_2_0, 
        		"NonEmptyStatementSequence");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSwitchCase
entryRuleSwitchCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchCaseRule()); }
	 iv_ruleSwitchCase=ruleSwitchCase 
	 { $current=$iv_ruleSwitchCase.current; } 
	 EOF 
;

// Rule SwitchCase
ruleSwitchCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchCaseAccess().getCaseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchCaseAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchCaseRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSwitchCaseAccess().getColonKeyword_2());
    }
)
;





// Entry rule entryRuleSwitchDefaultClause
entryRuleSwitchDefaultClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchDefaultClauseRule()); }
	 iv_ruleSwitchDefaultClause=ruleSwitchDefaultClause 
	 { $current=$iv_ruleSwitchDefaultClause.current; } 
	 EOF 
;

// Rule SwitchDefaultClause
ruleSwitchDefaultClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='default' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchDefaultClauseAccess().getDefaultKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSwitchDefaultClauseAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchDefaultClauseAccess().getStatementSequenceNonEmptyStatementSequenceParserRuleCall_2_0()); 
	    }
		lv_statementSequence_2_0=ruleNonEmptyStatementSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchDefaultClauseRule());
	        }
       		set(
       			$current, 
       			"statementSequence",
        		lv_statementSequence_2_0, 
        		"NonEmptyStatementSequence");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNonEmptyStatementSequence
entryRuleNonEmptyStatementSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonEmptyStatementSequenceRule()); }
	 iv_ruleNonEmptyStatementSequence=ruleNonEmptyStatementSequence 
	 { $current=$iv_ruleNonEmptyStatementSequence.current; } 
	 EOF 
;

// Rule NonEmptyStatementSequence
ruleNonEmptyStatementSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getNonEmptyStatementSequenceAccess().getStatementDocumentedStatementParserRuleCall_0()); 
	    }
		lv_statement_0_0=ruleDocumentedStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNonEmptyStatementSequenceRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_0_0, 
        		"DocumentedStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	 iv_ruleWhileStatement=ruleWhileStatement 
	 { $current=$iv_ruleWhileStatement.current; } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getBlockBlockParserRuleCall_4_0()); 
	    }
		lv_block_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDoStatement
entryRuleDoStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoStatementRule()); }
	 iv_ruleDoStatement=ruleDoStatement 
	 { $current=$iv_ruleDoStatement.current; } 
	 EOF 
;

// Rule DoStatement
ruleDoStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='do' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoStatementAccess().getBlockBlockParserRuleCall_1_0()); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoStatementRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_1_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='while' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoStatementAccess().getConditionExpressionParserRuleCall_4_0()); 
	    }
		lv_condition_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDoStatementAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	 iv_ruleForStatement=ruleForStatement 
	 { $current=$iv_ruleForStatement.current; } 
	 EOF 
;

// Rule ForStatement
ruleForStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getControlForControlParserRuleCall_2_0()); 
	    }
		lv_control_2_0=ruleForControl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"control",
        		lv_control_2_0, 
        		"ForControl");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getBlockBlockParserRuleCall_4_0()); 
	    }
		lv_block_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForControl
entryRuleForControl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForControlRule()); }
	 iv_ruleForControl=ruleForControl 
	 { $current=$iv_ruleForControl.current; } 
	 EOF 
;

// Rule ForControl
ruleForControl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getForControlAccess().getLoopVariableDefinitionLoopVariableDefinitionParserRuleCall_0_0()); 
	    }
		lv_loopVariableDefinition_0_0=ruleLoopVariableDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForControlRule());
	        }
       		add(
       			$current, 
       			"loopVariableDefinition",
        		lv_loopVariableDefinition_0_0, 
        		"LoopVariableDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForControlAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForControlAccess().getLoopVariableDefinitionLoopVariableDefinitionParserRuleCall_1_1_0()); 
	    }
		lv_loopVariableDefinition_2_0=ruleLoopVariableDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForControlRule());
	        }
       		add(
       			$current, 
       			"loopVariableDefinition",
        		lv_loopVariableDefinition_2_0, 
        		"LoopVariableDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLoopVariableDefinition
entryRuleLoopVariableDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopVariableDefinitionRule()); }
	 iv_ruleLoopVariableDefinition=ruleLoopVariableDefinition 
	 { $current=$iv_ruleLoopVariableDefinition.current; } 
	 EOF 
;

// Rule LoopVariableDefinition
ruleLoopVariableDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getLoopVariableDefinitionAccess().getNameIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoopVariableDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='in' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLoopVariableDefinitionAccess().getInKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopVariableDefinitionAccess().getExpression1ExpressionParserRuleCall_0_2_0()); 
	    }
		lv_expression1_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"expression1",
        		lv_expression1_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='..' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLoopVariableDefinitionAccess().getFullStopFullStopKeyword_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopVariableDefinitionAccess().getExpression2ExpressionParserRuleCall_0_3_1_0()); 
	    }
		lv_expression2_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"expression2",
        		lv_expression2_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getLoopVariableDefinitionAccess().getTypeQualifiedNameWithBindingParserRuleCall_1_0_0()); 
	    }
		lv_type_5_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"QualifiedNameWithBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_6_0=RULE_ID
		{
			newLeafNode(lv_name_6_0, grammarAccess.getLoopVariableDefinitionAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoopVariableDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_6_0, 
        		"ID");
	    }

)
)	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLoopVariableDefinitionAccess().getColonKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopVariableDefinitionAccess().getExpressionExpressionParserRuleCall_1_3_0()); 
	    }
		lv_expression_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_8_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleBreakStatement
entryRuleBreakStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBreakStatementRule()); }
	 iv_ruleBreakStatement=ruleBreakStatement 
	 { $current=$iv_ruleBreakStatement.current; } 
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
            $current);
    }
)	otherlv_1='break' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
    }
	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBreakStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='return' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReturnStatementAccess().getReturnKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReturnStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleAcceptStatement
entryRuleAcceptStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAcceptStatementRule()); }
	 iv_ruleAcceptStatement=ruleAcceptStatement 
	 { $current=$iv_ruleAcceptStatement.current; } 
	 EOF 
;

// Rule AcceptStatement
ruleAcceptStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAcceptStatementAccess().getClauseAcceptClauseParserRuleCall_0_0()); 
	    }
		lv_clause_0_0=ruleAcceptClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAcceptStatementRule());
	        }
       		set(
       			$current, 
       			"clause",
        		lv_clause_0_0, 
        		"AcceptClause");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getAcceptStatementAccess().getSimpleAcceptSimpleAcceptStatementCompletionParserRuleCall_1_0_0()); 
	    }
		lv_simpleAccept_1_0=ruleSimpleAcceptStatementCompletion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAcceptStatementRule());
	        }
       		set(
       			$current, 
       			"simpleAccept",
        		lv_simpleAccept_1_0, 
        		"SimpleAcceptStatementCompletion");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAcceptStatementAccess().getCompoundAcceptCompoundAcceptStatementCompletionParserRuleCall_1_1_0()); 
	    }
		lv_compoundAccept_2_0=ruleCompoundAcceptStatementCompletion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAcceptStatementRule());
	        }
       		set(
       			$current, 
       			"compoundAccept",
        		lv_compoundAccept_2_0, 
        		"CompoundAcceptStatementCompletion");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleSimpleAcceptStatementCompletion
entryRuleSimpleAcceptStatementCompletion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleAcceptStatementCompletionRule()); }
	 iv_ruleSimpleAcceptStatementCompletion=ruleSimpleAcceptStatementCompletion 
	 { $current=$iv_ruleSimpleAcceptStatementCompletion.current; } 
	 EOF 
;

// Rule SimpleAcceptStatementCompletion
ruleSimpleAcceptStatementCompletion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleAcceptStatementCompletionAccess().getSimpleAcceptStatementCompletionAction_0(),
            $current);
    }
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimpleAcceptStatementCompletionAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleCompoundAcceptStatementCompletion
entryRuleCompoundAcceptStatementCompletion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompoundAcceptStatementCompletionRule()); }
	 iv_ruleCompoundAcceptStatementCompletion=ruleCompoundAcceptStatementCompletion 
	 { $current=$iv_ruleCompoundAcceptStatementCompletion.current; } 
	 EOF 
;

// Rule CompoundAcceptStatementCompletion
ruleCompoundAcceptStatementCompletion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCompoundAcceptStatementCompletionAccess().getBlockBlockParserRuleCall_0_0()); 
	    }
		lv_block_0_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompoundAcceptStatementCompletionRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_0_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='or' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCompoundAcceptStatementCompletionAccess().getOrKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompoundAcceptStatementCompletionAccess().getAcceptBlockAcceptBlockParserRuleCall_1_1_0()); 
	    }
		lv_acceptBlock_2_0=ruleAcceptBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompoundAcceptStatementCompletionRule());
	        }
       		add(
       			$current, 
       			"acceptBlock",
        		lv_acceptBlock_2_0, 
        		"AcceptBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAcceptBlock
entryRuleAcceptBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAcceptBlockRule()); }
	 iv_ruleAcceptBlock=ruleAcceptBlock 
	 { $current=$iv_ruleAcceptBlock.current; } 
	 EOF 
;

// Rule AcceptBlock
ruleAcceptBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAcceptBlockAccess().getClauseAcceptClauseParserRuleCall_0_0()); 
	    }
		lv_clause_0_0=ruleAcceptClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAcceptBlockRule());
	        }
       		set(
       			$current, 
       			"clause",
        		lv_clause_0_0, 
        		"AcceptClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAcceptBlockAccess().getBlockBlockParserRuleCall_1_0()); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAcceptBlockRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_1_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAcceptClause
entryRuleAcceptClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAcceptClauseRule()); }
	 iv_ruleAcceptClause=ruleAcceptClause 
	 { $current=$iv_ruleAcceptClause.current; } 
	 EOF 
;

// Rule AcceptClause
ruleAcceptClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='accept' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAcceptClauseAccess().getAcceptKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAcceptClauseAccess().getLeftParenthesisKeyword_1());
    }
((
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getAcceptClauseAccess().getNameIDTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAcceptClauseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAcceptClauseAccess().getColonKeyword_2_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAcceptClauseAccess().getQualifiedNameListQualifiedNameListParserRuleCall_3_0()); 
	    }
		lv_qualifiedNameList_4_0=ruleQualifiedNameList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAcceptClauseRule());
	        }
       		set(
       			$current, 
       			"qualifiedNameList",
        		lv_qualifiedNameList_4_0, 
        		"QualifiedNameList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAcceptClauseAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleClassifyStatement
entryRuleClassifyStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassifyStatementRule()); }
	 iv_ruleClassifyStatement=ruleClassifyStatement 
	 { $current=$iv_ruleClassifyStatement.current; } 
	 EOF 
;

// Rule ClassifyStatement
ruleClassifyStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='classify' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassifyStatementAccess().getClassifyKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassifyStatementAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifyStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassifyStatementAccess().getClauseClassificationClauseParserRuleCall_2_0()); 
	    }
		lv_clause_2_0=ruleClassificationClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifyStatementRule());
	        }
       		set(
       			$current, 
       			"clause",
        		lv_clause_2_0, 
        		"ClassificationClause");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClassifyStatementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleClassificationClause
entryRuleClassificationClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassificationClauseRule()); }
	 iv_ruleClassificationClause=ruleClassificationClause 
	 { $current=$iv_ruleClassificationClause.current; } 
	 EOF 
;

// Rule ClassificationClause
ruleClassificationClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getClassificationClauseAccess().getClassifyFromClauseClassificationFromClauseParserRuleCall_0_0_0()); 
	    }
		lv_classifyFromClause_0_0=ruleClassificationFromClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassificationClauseRule());
	        }
       		set(
       			$current, 
       			"classifyFromClause",
        		lv_classifyFromClause_0_0, 
        		"ClassificationFromClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassificationClauseAccess().getClassifyToClauseClassificationToClauseParserRuleCall_0_1_0()); 
	    }
		lv_classifyToClause_1_0=ruleClassificationToClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassificationClauseRule());
	        }
       		set(
       			$current, 
       			"classifyToClause",
        		lv_classifyToClause_1_0, 
        		"ClassificationToClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getClassificationClauseAccess().getReclassyAllClauseReclassifyAllClauseParserRuleCall_1_0_0()); 
	    }
		lv_reclassyAllClause_2_0=ruleReclassifyAllClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassificationClauseRule());
	        }
       		set(
       			$current, 
       			"reclassyAllClause",
        		lv_reclassyAllClause_2_0, 
        		"ReclassifyAllClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getClassificationClauseAccess().getClassifyToClauseClassificationToClauseParserRuleCall_1_1_0()); 
	    }
		lv_classifyToClause_3_0=ruleClassificationToClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassificationClauseRule());
	        }
       		set(
       			$current, 
       			"classifyToClause",
        		lv_classifyToClause_3_0, 
        		"ClassificationToClause");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleClassificationFromClause
entryRuleClassificationFromClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassificationFromClauseRule()); }
	 iv_ruleClassificationFromClause=ruleClassificationFromClause 
	 { $current=$iv_ruleClassificationFromClause.current; } 
	 EOF 
;

// Rule ClassificationFromClause
ruleClassificationFromClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='from' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassificationFromClauseAccess().getFromKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassificationFromClauseAccess().getQualifiedNameListQualifiedNameListParserRuleCall_1_0()); 
	    }
		lv_qualifiedNameList_1_0=ruleQualifiedNameList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassificationFromClauseRule());
	        }
       		set(
       			$current, 
       			"qualifiedNameList",
        		lv_qualifiedNameList_1_0, 
        		"QualifiedNameList");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleClassificationToClause
entryRuleClassificationToClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassificationToClauseRule()); }
	 iv_ruleClassificationToClause=ruleClassificationToClause 
	 { $current=$iv_ruleClassificationToClause.current; } 
	 EOF 
;

// Rule ClassificationToClause
ruleClassificationToClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='to' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassificationToClauseAccess().getToKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassificationToClauseAccess().getQualifiedNameListQualifiedNameListParserRuleCall_1_0()); 
	    }
		lv_qualifiedNameList_1_0=ruleQualifiedNameList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassificationToClauseRule());
	        }
       		set(
       			$current, 
       			"qualifiedNameList",
        		lv_qualifiedNameList_1_0, 
        		"QualifiedNameList");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleReclassifyAllClause
entryRuleReclassifyAllClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReclassifyAllClauseRule()); }
	 iv_ruleReclassifyAllClause=ruleReclassifyAllClause 
	 { $current=$iv_ruleReclassifyAllClause.current; } 
	 EOF 
;

// Rule ReclassifyAllClause
ruleReclassifyAllClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getReclassifyAllClauseAccess().getReclassifyAllClauseAction_0(),
            $current);
    }
)	otherlv_1='from' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReclassifyAllClauseAccess().getFromKeyword_1());
    }
	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReclassifyAllClauseAccess().getAsteriskKeyword_2());
    }
)
;





// Entry rule entryRuleQualifiedNameList
entryRuleQualifiedNameList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameListRule()); }
	 iv_ruleQualifiedNameList=ruleQualifiedNameList 
	 { $current=$iv_ruleQualifiedNameList.current; } 
	 EOF 
;

// Rule QualifiedNameList
ruleQualifiedNameList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedNameListAccess().getQualifiedNameQualifiedNameWithBindingParserRuleCall_0_0()); 
	    }
		lv_qualifiedName_0_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedNameListRule());
	        }
       		add(
       			$current, 
       			"qualifiedName",
        		lv_qualifiedName_0_0, 
        		"QualifiedNameWithBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQualifiedNameListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedNameListAccess().getQualifiedNameQualifiedNameWithBindingParserRuleCall_1_1_0()); 
	    }
		lv_qualifiedName_2_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedNameListRule());
	        }
       		add(
       			$current, 
       			"qualifiedName",
        		lv_qualifiedName_2_0, 
        		"QualifiedNameWithBinding");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleInvocationOrAssignementOrDeclarationStatement
entryRuleInvocationOrAssignementOrDeclarationStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInvocationOrAssignementOrDeclarationStatementRule()); }
	 iv_ruleInvocationOrAssignementOrDeclarationStatement=ruleInvocationOrAssignementOrDeclarationStatement 
	 { $current=$iv_ruleInvocationOrAssignementOrDeclarationStatement.current; } 
	 EOF 
;

// Rule InvocationOrAssignementOrDeclarationStatement
ruleInvocationOrAssignementOrDeclarationStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInvocationOrAssignementOrDeclarationStatementAccess().getTypePart_OR_assignedPart_OR_invocationPartNameExpressionParserRuleCall_0_0()); 
	    }
		lv_typePart_OR_assignedPart_OR_invocationPart_0_0=ruleNameExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvocationOrAssignementOrDeclarationStatementRule());
	        }
       		set(
       			$current, 
       			"typePart_OR_assignedPart_OR_invocationPart",
        		lv_typePart_OR_assignedPart_OR_invocationPart_0_0, 
        		"NameExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getInvocationOrAssignementOrDeclarationStatementAccess().getVariableDeclarationCompletionVariableDeclarationCompletionParserRuleCall_1_0_0()); 
	    }
		lv_variableDeclarationCompletion_1_0=ruleVariableDeclarationCompletion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvocationOrAssignementOrDeclarationStatementRule());
	        }
       		set(
       			$current, 
       			"variableDeclarationCompletion",
        		lv_variableDeclarationCompletion_1_0, 
        		"VariableDeclarationCompletion");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInvocationOrAssignementOrDeclarationStatementAccess().getAssignmentCompletionAssignmentCompletionParserRuleCall_1_1_0()); 
	    }
		lv_assignmentCompletion_2_0=ruleAssignmentCompletion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvocationOrAssignementOrDeclarationStatementRule());
	        }
       		set(
       			$current, 
       			"assignmentCompletion",
        		lv_assignmentCompletion_2_0, 
        		"AssignmentCompletion");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInvocationOrAssignementOrDeclarationStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleSuperInvocationStatement
entryRuleSuperInvocationStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuperInvocationStatementRule()); }
	 iv_ruleSuperInvocationStatement=ruleSuperInvocationStatement 
	 { $current=$iv_ruleSuperInvocationStatement.current; } 
	 EOF 
;

// Rule SuperInvocationStatement
ruleSuperInvocationStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSuperInvocationStatementAccess().get_superSuperInvocationExpressionParserRuleCall_0_0()); 
	    }
		lv__super_0_0=ruleSuperInvocationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuperInvocationStatementRule());
	        }
       		set(
       			$current, 
       			"_super",
        		lv__super_0_0, 
        		"SuperInvocationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSuperInvocationStatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleThisInvocationStatement
entryRuleThisInvocationStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getThisInvocationStatementRule()); }
	 iv_ruleThisInvocationStatement=ruleThisInvocationStatement 
	 { $current=$iv_ruleThisInvocationStatement.current; } 
	 EOF 
;

// Rule ThisInvocationStatement
ruleThisInvocationStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getThisInvocationStatementAccess().get_thisThisExpressionParserRuleCall_0_0()); 
	    }
		lv__this_0_0=ruleThisExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThisInvocationStatementRule());
	        }
       		set(
       			$current, 
       			"_this",
        		lv__this_0_0, 
        		"ThisExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getThisInvocationStatementAccess().getAssignmentCompletionAssignmentCompletionParserRuleCall_1_0()); 
	    }
		lv_assignmentCompletion_1_0=ruleAssignmentCompletion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThisInvocationStatementRule());
	        }
       		set(
       			$current, 
       			"assignmentCompletion",
        		lv_assignmentCompletion_1_0, 
        		"AssignmentCompletion");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getThisInvocationStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleInstanceCreationInvocationStatement
entryRuleInstanceCreationInvocationStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceCreationInvocationStatementRule()); }
	 iv_ruleInstanceCreationInvocationStatement=ruleInstanceCreationInvocationStatement 
	 { $current=$iv_ruleInstanceCreationInvocationStatement.current; } 
	 EOF 
;

// Rule InstanceCreationInvocationStatement
ruleInstanceCreationInvocationStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceCreationInvocationStatementAccess().get_newInstanceCreationExpressionParserRuleCall_0_0()); 
	    }
		lv__new_0_0=ruleInstanceCreationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceCreationInvocationStatementRule());
	        }
       		set(
       			$current, 
       			"_new",
        		lv__new_0_0, 
        		"InstanceCreationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstanceCreationInvocationStatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleVariableDeclarationCompletion
entryRuleVariableDeclarationCompletion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationCompletionRule()); }
	 iv_ruleVariableDeclarationCompletion=ruleVariableDeclarationCompletion 
	 { $current=$iv_ruleVariableDeclarationCompletion.current; } 
	 EOF 
;

// Rule VariableDeclarationCompletion
ruleVariableDeclarationCompletion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_multiplicityIndicator_0_0=	'[' 
    {
        newLeafNode(lv_multiplicityIndicator_0_0, grammarAccess.getVariableDeclarationCompletionAccess().getMultiplicityIndicatorLeftSquareBracketKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationCompletionRule());
	        }
       		setWithLastConsumed($current, "multiplicityIndicator", true, "[");
	    }

)
)	otherlv_1=']' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationCompletionAccess().getRightSquareBracketKeyword_0_1());
    }
)?(
(
		lv_variableName_2_0=RULE_ID
		{
			newLeafNode(lv_variableName_2_0, grammarAccess.getVariableDeclarationCompletionAccess().getVariableNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationCompletionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variableName",
        		lv_variableName_2_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationCompletionAccess().getInitValueAssignmentCompletionParserRuleCall_2_0()); 
	    }
		lv_initValue_3_0=ruleAssignmentCompletion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationCompletionRule());
	        }
       		set(
       			$current, 
       			"initValue",
        		lv_initValue_3_0, 
        		"AssignmentCompletion");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAssignmentCompletion
entryRuleAssignmentCompletion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentCompletionRule()); }
	 iv_ruleAssignmentCompletion=ruleAssignmentCompletion 
	 { $current=$iv_ruleAssignmentCompletion.current; } 
	 EOF 
;

// Rule AssignmentCompletion
ruleAssignmentCompletion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentCompletionAccess().getOpAssignmentOperatorEnumRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleAssignmentOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentCompletionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"AssignmentOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentCompletionAccess().getRightHandSideSequenceElementParserRuleCall_1_0()); 
	    }
		lv_rightHandSide_1_0=ruleSequenceElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentCompletionRule());
	        }
       		set(
       			$current, 
       			"rightHandSide",
        		lv_rightHandSide_1_0, 
        		"SequenceElement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Rule BooleanValue
ruleBooleanValue returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='true' 
	{
        $current = grammarAccess.getBooleanValueAccess().getTRUEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBooleanValueAccess().getTRUEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='false' 
	{
        $current = grammarAccess.getBooleanValueAccess().getFALSEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBooleanValueAccess().getFALSEEnumLiteralDeclaration_1()); 
    }
));



// Rule LinkOperationKind
ruleLinkOperationKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='createLink' 
	{
        $current = grammarAccess.getLinkOperationKindAccess().getCREATEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLinkOperationKindAccess().getCREATEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='destroyLink' 
	{
        $current = grammarAccess.getLinkOperationKindAccess().getDESTROYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getLinkOperationKindAccess().getDESTROYEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='clearAssoc' 
	{
        $current = grammarAccess.getLinkOperationKindAccess().getCLEAREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getLinkOperationKindAccess().getCLEAREnumLiteralDeclaration_2()); 
    }
));



// Rule SelectOrRejectOperator
ruleSelectOrRejectOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='select' 
	{
        $current = grammarAccess.getSelectOrRejectOperatorAccess().getSELECTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSelectOrRejectOperatorAccess().getSELECTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='reject' 
	{
        $current = grammarAccess.getSelectOrRejectOperatorAccess().getREJECTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSelectOrRejectOperatorAccess().getREJECTEnumLiteralDeclaration_1()); 
    }
));



// Rule CollectOrIterateOperator
ruleCollectOrIterateOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='collect' 
	{
        $current = grammarAccess.getCollectOrIterateOperatorAccess().getCOLLECTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCollectOrIterateOperatorAccess().getCOLLECTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='iterate' 
	{
        $current = grammarAccess.getCollectOrIterateOperatorAccess().getITERATEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCollectOrIterateOperatorAccess().getITERATEEnumLiteralDeclaration_1()); 
    }
));



// Rule ForAllOrExistsOrOneOperator
ruleForAllOrExistsOrOneOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='forAll' 
	{
        $current = grammarAccess.getForAllOrExistsOrOneOperatorAccess().getFORALLEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getForAllOrExistsOrOneOperatorAccess().getFORALLEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='exists' 
	{
        $current = grammarAccess.getForAllOrExistsOrOneOperatorAccess().getEXISTSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getForAllOrExistsOrOneOperatorAccess().getEXISTSEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='one' 
	{
        $current = grammarAccess.getForAllOrExistsOrOneOperatorAccess().getONEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getForAllOrExistsOrOneOperatorAccess().getONEEnumLiteralDeclaration_2()); 
    }
));



// Rule AnnotationKind
ruleAnnotationKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='isolated' 
	{
        $current = grammarAccess.getAnnotationKindAccess().getISOLATEDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAnnotationKindAccess().getISOLATEDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='determined' 
	{
        $current = grammarAccess.getAnnotationKindAccess().getDETERMINEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAnnotationKindAccess().getDETERMINEDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='assured' 
	{
        $current = grammarAccess.getAnnotationKindAccess().getASSUREDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAnnotationKindAccess().getASSUREDEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='parallel' 
	{
        $current = grammarAccess.getAnnotationKindAccess().getPARALLELEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAnnotationKindAccess().getPARALLELEnumLiteralDeclaration_3()); 
    }
));



// Rule AssignmentOperator
ruleAssignmentOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getASSIGNEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAssignmentOperatorAccess().getASSIGNEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='+=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getPLUSASSIGNEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAssignmentOperatorAccess().getPLUSASSIGNEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='-=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getMINUSASSIGNEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAssignmentOperatorAccess().getMINUSASSIGNEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='*=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getMULTASSIGNEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAssignmentOperatorAccess().getMULTASSIGNEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='%=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getMODASSIGNEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getAssignmentOperatorAccess().getMODASSIGNEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='/=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getDIVASSIGNEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getAssignmentOperatorAccess().getDIVASSIGNEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='&=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getANDASSIGNEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getAssignmentOperatorAccess().getANDASSIGNEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='|=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getORASSIGNEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getAssignmentOperatorAccess().getORASSIGNEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='^=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getXORASSIGNEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getAssignmentOperatorAccess().getXORASSIGNEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='<<=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getLSHIFTASSIGNEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getAssignmentOperatorAccess().getLSHIFTASSIGNEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='>>=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getRSHIFTASSIGNEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getAssignmentOperatorAccess().getRSHIFTASSIGNEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='>>>=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getURSHIFTASSIGNEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getAssignmentOperatorAccess().getURSHIFTASSIGNEnumLiteralDeclaration_11()); 
    }
));



RULE_ID : (('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*|'\'' ( options {greedy=false;} : . )*'\'');

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ML_COMMENT : '/*' ~('@') ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'|'@'))* ('\r'? '\n')?;

RULE_INT : ('0'..'9')+;

RULE_INTEGER_VALUE : (('0'|'1'..'9' ('_'? '0'..'9')*)|('0b'|'0B') '0'..'1' ('_'? '0'..'1')*|('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F') ('_'? ('0'..'9'|'a'..'f'|'A'..'F'))*|'0' '_'? '0'..'7' ('_'? '0'..'7')*);

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


